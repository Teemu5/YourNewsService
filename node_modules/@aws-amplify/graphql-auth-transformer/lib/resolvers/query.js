"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAuthExpressionForRelationQuery = exports.generateAuthExpressionForQueries = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const helpers_1 = require("./helpers");
const utils_1 = require("../utils");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const generateStaticRoleExpression = (roles) => {
    const staticRoleExpression = [];
    let privateRoleIdx = roles.findIndex(r => r.strategy === 'private');
    if (privateRoleIdx > -1) {
        staticRoleExpression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)));
        roles.splice(privateRoleIdx, 1);
    }
    if (roles.length > 0) {
        staticRoleExpression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('staticGroupRoles'), graphql_mapping_template_1.raw(JSON.stringify(roles.map(r => ({ claim: r.claim, entity: r.entity }))))),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('groupRole'), graphql_mapping_template_1.ref('staticGroupRoles'), [
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('groupsInToken'), helpers_1.getIdentityClaimExp(graphql_mapping_template_1.ref('groupRole.claim'), graphql_mapping_template_1.list([]))),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('groupsInToken.contains'), graphql_mapping_template_1.ref('groupRole.entity')), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), graphql_mapping_template_1.raw(`#break`)])),
            ]),
        ])));
    }
    return staticRoleExpression;
};
const generateAuthOnRelationalModelQueryExpression = (roles, primaryFieldMap) => {
    const modelQueryExpression = new Array();
    const primaryRoles = roles.filter(r => primaryFieldMap.has(r.entity));
    if (primaryRoles.length > 0) {
        primaryRoles.forEach((role, idx) => {
            const { claim, field } = primaryFieldMap.get(role.entity);
            modelQueryExpression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`primaryRole${idx}`), role.strategy === 'owner' ? helpers_1.getOwnerClaim(role.claim) : helpers_1.getIdentityClaimExp(graphql_mapping_template_1.str(role.claim), graphql_mapping_template_1.str(graphql_transformer_common_1.NONE_VALUE))), graphql_mapping_template_1.ifElse(graphql_mapping_template_1.and([
                graphql_mapping_template_1.parens(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(`util.isNull($ctx.${claim}.${field})`))),
                graphql_mapping_template_1.parens(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(`ctx.${claim}.${field}`), graphql_mapping_template_1.ref(`primaryRole${idx}`))),
            ]), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.put'), graphql_mapping_template_1.str('authFilter'), graphql_mapping_template_1.nul()))]), graphql_mapping_template_1.iff(graphql_mapping_template_1.and([graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.isNull'), graphql_mapping_template_1.ref('ctx.stash.authFilter'))]), graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`ctx.${claim}.put`), graphql_mapping_template_1.str(field), graphql_mapping_template_1.ref(`primaryRole${idx}`))),
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)),
            ]))));
        });
        return [graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.compoundExpression(modelQueryExpression))];
    }
    return modelQueryExpression;
};
const generateAuthOnModelQueryExpression = (roles, primaryFields, isIndexQuery = false) => {
    const modelQueryExpression = new Array();
    const primaryRoles = roles.filter(r => primaryFields.includes(r.entity));
    if (primaryRoles.length > 0) {
        if (isIndexQuery) {
            for (let role of primaryRoles) {
                const claimExpression = role.strategy === 'owner' ? helpers_1.getOwnerClaim(role.claim) : helpers_1.getIdentityClaimExp(graphql_mapping_template_1.str(role.claim), graphql_mapping_template_1.str(graphql_transformer_common_1.NONE_VALUE));
                modelQueryExpression.push(graphql_mapping_template_1.ifElse(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(`util.isNull($ctx.args.${role.entity})`)), graphql_mapping_template_1.compoundExpression([
                    graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${role.entity}Claim`), claimExpression),
                    graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(`util.isString($ctx.args.${role.entity})`), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${role.entity}Condition`), graphql_mapping_template_1.parens(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(`${role.entity}Claim`), graphql_mapping_template_1.ref(`$ctx.args.${role.entity}`)))), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${role.entity}Condition`), graphql_mapping_template_1.parens(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(`${role.entity}Claim`), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.raw(`$ctx.args.${role.entity}.get("eq")`), graphql_mapping_template_1.str(graphql_transformer_common_1.NONE_VALUE)))))),
                    graphql_mapping_template_1.iff(graphql_mapping_template_1.ref(`${role.entity}Condition`), graphql_mapping_template_1.compoundExpression([
                        graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)),
                        graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.put'), graphql_mapping_template_1.str('authFilter'), graphql_mapping_template_1.nul())),
                    ])),
                ]), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('primaryFieldMap.put'), graphql_mapping_template_1.str(role.entity), claimExpression))));
            }
            modelQueryExpression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.and([
                graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)),
                graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.isNull'), graphql_mapping_template_1.ref('ctx.stash.authFilter')),
                graphql_mapping_template_1.not(graphql_mapping_template_1.ref('primaryFieldMap.isEmpty()')),
            ]), graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref('primaryFieldMap.entrySet()'), [
                    graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.args.put'), graphql_mapping_template_1.ref('entry.key'), graphql_mapping_template_1.ref('entry.value'))),
                    graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)),
                ]),
            ])));
        }
        else {
            for (let role of primaryRoles) {
                const claimExpression = role.strategy === 'owner' ? helpers_1.getOwnerClaim(role.claim) : helpers_1.getIdentityClaimExp(graphql_mapping_template_1.str(role.claim), graphql_mapping_template_1.str(graphql_transformer_common_1.NONE_VALUE));
                modelQueryExpression.push(graphql_mapping_template_1.ifElse(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(`util.isNull($ctx.args.${role.entity})`)), graphql_mapping_template_1.compoundExpression([
                    graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${role.entity}Claim`), claimExpression),
                    graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref(`util.isString($ctx.args.${role.entity})`), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${role.entity}Condition`), graphql_mapping_template_1.parens(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(`${role.entity}Claim`), graphql_mapping_template_1.ref(`ctx.args.${role.entity}`)))), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`${role.entity}Condition`), graphql_mapping_template_1.parens(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(`${role.entity}Claim`), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.raw(`$ctx.args.${role.entity}.get("eq")`), graphql_mapping_template_1.str(graphql_transformer_common_1.NONE_VALUE)))))),
                    graphql_mapping_template_1.iff(graphql_mapping_template_1.ref(`${role.entity}Condition`), graphql_mapping_template_1.compoundExpression([
                        graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)),
                        graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.put'), graphql_mapping_template_1.str('authFilter'), graphql_mapping_template_1.nul())),
                    ])),
                ]), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('primaryFieldMap.put'), graphql_mapping_template_1.str(role.entity), claimExpression))));
            }
            modelQueryExpression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.and([
                graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)),
                graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.isNull'), graphql_mapping_template_1.ref('ctx.stash.authFilter')),
                graphql_mapping_template_1.not(graphql_mapping_template_1.ref('primaryFieldMap.isEmpty()')),
            ]), graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('modelQueryExpression'), graphql_mapping_template_1.ref('ctx.stash.modelQueryExpression')),
                graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('entry'), graphql_mapping_template_1.ref('primaryFieldMap.entrySet()'), [
                    graphql_mapping_template_1.set(graphql_mapping_template_1.ref('modelQueryExpression.expression'), graphql_mapping_template_1.str('${modelQueryExpression.expression} AND #${entry.key} = :${entry.value}')),
                    graphql_mapping_template_1.qref(graphql_mapping_template_1.ref('modelQueryExpression.expressionNames.put("#${entry.key}", $entry.key)')),
                    graphql_mapping_template_1.qref(graphql_mapping_template_1.ref('modelQueryExpression.expressionValues.put(":${entry.value}", $util.dynamodb.toDynamoDB($entry.value))')),
                ]),
                graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.put'), graphql_mapping_template_1.str('modelQueryExpression'), graphql_mapping_template_1.ref('modelQueryExpression'))),
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)),
            ])));
        }
        return modelQueryExpression;
    }
    return [];
};
const generateAuthFilter = (roles, fields) => {
    const authCollectionExp = new Array();
    const groupMap = new Map();
    const groupContainsExpression = new Array();
    if (!(roles.length > 0))
        return [];
    roles.forEach((role, idx) => {
        const entityIsList = utils_1.fieldIsList(fields, role.entity);
        if (role.strategy === 'owner') {
            const ownerCondition = entityIsList ? 'contains' : 'eq';
            authCollectionExp.push(...[
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`role${idx}`), helpers_1.getOwnerClaim(role.claim)),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.notEquals(graphql_mapping_template_1.ref(`role${idx}`), graphql_mapping_template_1.str(graphql_transformer_common_1.NONE_VALUE)), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('authFilter.add'), graphql_mapping_template_1.raw(`{"${role.entity}": { "${ownerCondition}": $role${idx} }}`)))),
            ]);
        }
        else if (role.strategy === 'groups') {
            if (entityIsList) {
                if (groupMap.has(role.claim)) {
                    groupMap.get(role.claim).push(role.entity);
                }
                else {
                    groupMap.set(role.claim, [role.entity]);
                }
            }
            else {
                authCollectionExp.push(...[
                    graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`role${idx}`), helpers_1.getIdentityClaimExp(graphql_mapping_template_1.str(role.claim), graphql_mapping_template_1.list([]))),
                    graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`role${idx}.isEmpty`))), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('authFilter.add'), graphql_mapping_template_1.raw(`{ "${role.entity}": { "in": $role${idx} } }`)))),
                ]);
            }
        }
    });
    for (let [groupClaim, fieldList] of groupMap) {
        groupContainsExpression.push(graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('group'), graphql_mapping_template_1.ref(`util.defaultIfNull($ctx.identity.claims.get("${groupClaim}"), [])`), fieldList.map(field => graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`group.isEmpty`))), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('authFilter.add'), graphql_mapping_template_1.raw(`{"${field}": { "contains": $group }}`)))))));
    }
    return [
        graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('authFilter'), graphql_mapping_template_1.list([])),
            ...authCollectionExp,
            ...groupContainsExpression,
            graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('authFilter.isEmpty'))), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.put'), graphql_mapping_template_1.str('authFilter'), graphql_mapping_template_1.raw('{ "or": $authFilter }')))),
        ])),
    ];
};
const generateAuthExpressionForQueries = (providers, roles, fields, primaryFields, isIndexQuery = false) => {
    const { cognitoStaticRoles, cognitoDynamicRoles, oidcStaticRoles, oidcDynamicRoles, apiKeyRoles, iamRoles, lambdaRoles } = utils_1.splitRoles(roles);
    const getNonPrimaryFieldRoles = (roles) => roles.filter(roles => !primaryFields.includes(roles.entity));
    const totalAuthExpressions = [
        helpers_1.setHasAuthExpression,
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(false)),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('primaryFieldMap'), graphql_mapping_template_1.obj({})),
    ];
    if (providers.hasApiKey) {
        totalAuthExpressions.push(helpers_1.apiKeyExpression(apiKeyRoles));
    }
    if (providers.hasLambda) {
        totalAuthExpressions.push(helpers_1.lambdaExpression(lambdaRoles));
    }
    if (providers.hasIAM) {
        totalAuthExpressions.push(helpers_1.iamExpression(iamRoles, providers.hasAdminRolesEnabled, providers.adminRoles, providers.identityPoolId));
    }
    if (providers.hasUserPools) {
        totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.COGNITO_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([
            ...generateStaticRoleExpression(cognitoStaticRoles),
            ...generateAuthFilter(getNonPrimaryFieldRoles(cognitoDynamicRoles), fields),
            ...generateAuthOnModelQueryExpression(cognitoDynamicRoles, primaryFields, isIndexQuery),
        ])));
    }
    if (providers.hasOIDC) {
        totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.OIDC_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([
            ...generateStaticRoleExpression(oidcStaticRoles),
            ...generateAuthFilter(getNonPrimaryFieldRoles(oidcDynamicRoles), fields),
            ...generateAuthOnModelQueryExpression(oidcDynamicRoles, primaryFields, isIndexQuery),
        ])));
    }
    totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.and([graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.isNull'), graphql_mapping_template_1.ref('ctx.stash.authFilter'))]), graphql_mapping_template_1.ref('util.unauthorized()')));
    return graphql_mapping_template_1.printBlock('Authorization Steps')(graphql_mapping_template_1.compoundExpression([...totalAuthExpressions, helpers_1.emptyPayload]));
};
exports.generateAuthExpressionForQueries = generateAuthExpressionForQueries;
const generateAuthExpressionForRelationQuery = (providers, roles, fields, primaryFieldMap) => {
    const { cognitoStaticRoles, cognitoDynamicRoles, oidcStaticRoles, oidcDynamicRoles, apiKeyRoles, iamRoles, lambdaRoles } = utils_1.splitRoles(roles);
    const getNonPrimaryFieldRoles = (roles) => roles.filter(roles => !primaryFieldMap.has(roles.entity));
    const totalAuthExpressions = [helpers_1.setHasAuthExpression, graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(false))];
    if (providers.hasApiKey) {
        totalAuthExpressions.push(helpers_1.apiKeyExpression(apiKeyRoles));
    }
    if (providers.hasLambda) {
        totalAuthExpressions.push(helpers_1.lambdaExpression(lambdaRoles));
    }
    if (providers.hasIAM) {
        totalAuthExpressions.push(helpers_1.iamExpression(iamRoles, providers.hasAdminRolesEnabled, providers.adminRoles, providers.identityPoolId));
    }
    if (providers.hasUserPools) {
        totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.COGNITO_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([
            ...generateStaticRoleExpression(cognitoStaticRoles),
            ...generateAuthFilter(getNonPrimaryFieldRoles(cognitoDynamicRoles), fields),
            ...generateAuthOnRelationalModelQueryExpression(cognitoDynamicRoles, primaryFieldMap),
        ])));
    }
    if (providers.hasOIDC) {
        totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.OIDC_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([
            ...generateStaticRoleExpression(oidcStaticRoles),
            ...generateAuthFilter(getNonPrimaryFieldRoles(oidcDynamicRoles), fields),
            ...generateAuthOnRelationalModelQueryExpression(oidcDynamicRoles, primaryFieldMap),
        ])));
    }
    totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.and([graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.isNull'), graphql_mapping_template_1.ref('ctx.stash.authFilter'))]), graphql_mapping_template_1.ref('util.unauthorized()')));
    return graphql_mapping_template_1.printBlock('Authorization Steps')(graphql_mapping_template_1.compoundExpression([...totalAuthExpressions, helpers_1.emptyPayload]));
};
exports.generateAuthExpressionForRelationQuery = generateAuthExpressionForRelationQuery;
//# sourceMappingURL=query.js.map