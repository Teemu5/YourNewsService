"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.emptyPayload = exports.generateAuthRequestExpression = exports.iamAdminRoleCheckExpression = exports.iamExpression = exports.lambdaExpression = exports.apiKeyExpression = exports.generateStaticRoleExpression = exports.responseCheckForErrors = exports.getOwnerClaim = exports.iamCheck = exports.addAllowedFieldsIfElse = exports.getIdentityClaimExp = exports.getInputFields = exports.setHasAuthExpression = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const utils_1 = require("../utils");
exports.setHasAuthExpression = graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.put'), graphql_mapping_template_1.str('hasAuth'), graphql_mapping_template_1.bool(true)));
const getInputFields = () => {
    return graphql_mapping_template_1.set(graphql_mapping_template_1.ref('inputFields'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.parseJson'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.toJson'), graphql_mapping_template_1.ref('ctx.args.input.keySet()'))));
};
exports.getInputFields = getInputFields;
const getIdentityClaimExp = (value, defaultValueExp) => {
    return graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.identity.claims.get'), value), defaultValueExp);
};
exports.getIdentityClaimExp = getIdentityClaimExp;
const addAllowedFieldsIfElse = (fieldKey, breakLoop = false) => {
    return graphql_mapping_template_1.ifElse(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(`${fieldKey}.isEmpty()`)), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`${utils_1.ALLOWED_FIELDS}.addAll`), graphql_mapping_template_1.ref(fieldKey))), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), ...(breakLoop ? [graphql_mapping_template_1.raw('#break')] : [])]));
};
exports.addAllowedFieldsIfElse = addAllowedFieldsIfElse;
const iamCheck = (claim, exp, identityPoolId) => {
    let iamExp = graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('ctx.identity.userArn'), graphql_mapping_template_1.ref(`ctx.stash.${claim}`));
    if (identityPoolId && claim === 'authRole') {
        iamExp = graphql_mapping_template_1.or([
            graphql_mapping_template_1.parens(iamExp),
            graphql_mapping_template_1.parens(graphql_mapping_template_1.and([
                graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('ctx.identity.cognitoIdentityPoolId'), graphql_mapping_template_1.str(identityPoolId)),
                graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('ctx.identity.cognitoIdentityAuthType'), graphql_mapping_template_1.str('authenticated')),
            ])),
        ]);
    }
    return graphql_mapping_template_1.iff(iamExp, exp);
};
exports.iamCheck = iamCheck;
const getOwnerClaim = (ownerClaim) => {
    if (ownerClaim === 'username') {
        return exports.getIdentityClaimExp(graphql_mapping_template_1.str(ownerClaim), exports.getIdentityClaimExp(graphql_mapping_template_1.str(utils_1.DEFAULT_COGNITO_IDENTITY_CLAIM), graphql_mapping_template_1.str(graphql_transformer_common_1.NONE_VALUE)));
    }
    return exports.getIdentityClaimExp(graphql_mapping_template_1.str(ownerClaim), graphql_mapping_template_1.str(graphql_transformer_common_1.NONE_VALUE));
};
exports.getOwnerClaim = getOwnerClaim;
const responseCheckForErrors = () => graphql_mapping_template_1.iff(graphql_mapping_template_1.ref('ctx.error'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.error'), graphql_mapping_template_1.ref('ctx.error.message'), graphql_mapping_template_1.ref('ctx.error.type')));
exports.responseCheckForErrors = responseCheckForErrors;
const generateStaticRoleExpression = (roles) => {
    const staticRoleExpression = new Array();
    const privateRoleIdx = roles.findIndex(r => r.strategy === 'private');
    if (privateRoleIdx > -1) {
        staticRoleExpression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)));
        roles.splice(privateRoleIdx, 1);
    }
    if (roles.length > 0) {
        staticRoleExpression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('staticGroupRoles'), graphql_mapping_template_1.raw(JSON.stringify(roles.map(r => ({ claim: r.claim, entity: r.entity }))))),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('groupRole'), graphql_mapping_template_1.ref('staticGroupRoles'), [
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('groupsInToken'), exports.getIdentityClaimExp(graphql_mapping_template_1.ref('groupRole.claim'), graphql_mapping_template_1.list([]))),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('groupsInToken.contains'), graphql_mapping_template_1.ref('groupRole.entity')), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), graphql_mapping_template_1.raw(`#break`)])),
            ]),
        ])));
    }
    return staticRoleExpression;
};
exports.generateStaticRoleExpression = generateStaticRoleExpression;
const apiKeyExpression = (roles) => {
    return graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.API_KEY_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([...(roles.length > 0 ? [graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true))] : [])]));
};
exports.apiKeyExpression = apiKeyExpression;
const lambdaExpression = (roles) => {
    return graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.LAMBDA_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([...(roles.length > 0 ? [graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true))] : [])]));
};
exports.lambdaExpression = lambdaExpression;
const iamExpression = (roles, adminRolesEnabled, adminRoles = [], identityPoolId) => {
    const expression = new Array();
    if (adminRolesEnabled) {
        expression.push(exports.iamAdminRoleCheckExpression(adminRoles));
    }
    if (roles.length > 0) {
        for (let role of roles) {
            expression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), exports.iamCheck(role.claim, graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), identityPoolId)));
        }
    }
    else {
        expression.push(graphql_mapping_template_1.ref('util.unauthorized()'));
    }
    return graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.IAM_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression(expression));
};
exports.iamExpression = iamExpression;
const iamAdminRoleCheckExpression = (adminRoles) => {
    return graphql_mapping_template_1.compoundExpression([
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('adminRoles'), graphql_mapping_template_1.raw(JSON.stringify(adminRoles))),
        graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('adminRole'), graphql_mapping_template_1.ref('adminRoles'), [
            graphql_mapping_template_1.iff(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.identity.userArn.contains'), graphql_mapping_template_1.ref('adminRole')), graphql_mapping_template_1.raw('#return($util.toJson({}))')),
        ]),
    ]);
};
exports.iamAdminRoleCheckExpression = iamAdminRoleCheckExpression;
const generateAuthRequestExpression = () => {
    const statements = [
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref('GetRequest'), graphql_mapping_template_1.obj({ version: graphql_mapping_template_1.str('2018-05-29'), operation: graphql_mapping_template_1.str('GetItem') })),
        graphql_mapping_template_1.ifElse(graphql_mapping_template_1.ref('ctx.stash.metadata.modelObjectKey'), graphql_mapping_template_1.set(graphql_mapping_template_1.ref('key'), graphql_mapping_template_1.ref('ctx.stash.metadata.modelObjectKey')), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref('key'), graphql_mapping_template_1.obj({ id: graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.dynamodb.toDynamoDB'), graphql_mapping_template_1.ref('ctx.args.input.id')) }))])),
        graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('GetRequest.put'), graphql_mapping_template_1.str('key'), graphql_mapping_template_1.ref('key'))),
        graphql_mapping_template_1.toJson(graphql_mapping_template_1.ref('GetRequest')),
    ];
    return graphql_mapping_template_1.printBlock('Get Request template')(graphql_mapping_template_1.compoundExpression(statements));
};
exports.generateAuthRequestExpression = generateAuthRequestExpression;
exports.emptyPayload = graphql_mapping_template_1.toJson(graphql_mapping_template_1.raw(JSON.stringify({ version: '2018-05-29', payload: {} })));
//# sourceMappingURL=helpers.js.map