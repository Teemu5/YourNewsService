"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSandboxExpressionForField = exports.setDeniedFieldFlag = exports.generateFieldAuthResponse = exports.generateAuthExpressionForField = void 0;
const graphql_model_transformer_1 = require("@aws-amplify/graphql-model-transformer");
const graphql_mapping_template_1 = require("graphql-mapping-template");
const utils_1 = require("../utils");
const helpers_1 = require("./helpers");
const generateDynamicAuthReadExpression = (roles, fields) => {
    const ownerExpressions = new Array();
    const dynamicGroupExpressions = new Array();
    roles.forEach((role, idx) => {
        const entityIsList = utils_1.fieldIsList(fields, role.entity);
        if (role.strategy === 'owner') {
            ownerExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`ownerEntity${idx}`), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.ref(`ctx.source.${role.entity}`), graphql_mapping_template_1.nul())),
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`ownerClaim${idx}`), helpers_1.getOwnerClaim(role.claim)),
                ...(entityIsList
                    ? [
                        graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('allowedOwner'), graphql_mapping_template_1.ref(`ownerEntity${idx}`), [
                            graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('allowedOwner'), graphql_mapping_template_1.ref(`ownerClaim${idx}`)), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), graphql_mapping_template_1.raw('#break')])),
                        ]),
                    ]
                    : [graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(`ownerEntity${idx}`), graphql_mapping_template_1.ref(`ownerClaim${idx}`)), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)))]),
            ])));
        }
        if (role.strategy === 'groups') {
            dynamicGroupExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`groupEntity${idx}`), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.ref(`ctx.source.${role.entity}`), graphql_mapping_template_1.nul())),
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`groupClaim${idx}`), helpers_1.getIdentityClaimExp(graphql_mapping_template_1.str(role.claim), graphql_mapping_template_1.list([]))),
                entityIsList
                    ? graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('userGroup'), graphql_mapping_template_1.ref(`groupClaim${idx}`), [
                        graphql_mapping_template_1.iff(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`groupEntity${idx}.contains`), graphql_mapping_template_1.ref('userGroup')), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), graphql_mapping_template_1.raw('#break')])),
                    ])
                    : graphql_mapping_template_1.iff(graphql_mapping_template_1.ref(`groupClaim${idx}.contains($groupEntity${idx})`), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true))),
            ])));
        }
    });
    return [...(ownerExpressions.length > 0 || dynamicGroupExpressions.length > 0 ? [...ownerExpressions, ...dynamicGroupExpressions] : [])];
};
const generateAuthExpressionForField = (providers, roles, fields) => {
    const { cognitoStaticRoles, cognitoDynamicRoles, oidcStaticRoles, oidcDynamicRoles, iamRoles, apiKeyRoles, lambdaRoles } = utils_1.splitRoles(roles);
    const totalAuthExpressions = [graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(false))];
    if (providers.hasApiKey) {
        totalAuthExpressions.push(helpers_1.apiKeyExpression(apiKeyRoles));
    }
    if (providers.hasLambda) {
        totalAuthExpressions.push(helpers_1.lambdaExpression(lambdaRoles));
    }
    if (providers.hasIAM) {
        totalAuthExpressions.push(helpers_1.iamExpression(iamRoles, providers.hasAdminRolesEnabled, providers.adminRoles, providers.identityPoolId));
    }
    if (providers.hasUserPools) {
        totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.COGNITO_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([
            ...helpers_1.generateStaticRoleExpression(cognitoStaticRoles),
            ...generateDynamicAuthReadExpression(cognitoDynamicRoles, fields),
        ])));
    }
    if (providers.hasOIDC) {
        totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.OIDC_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([
            ...helpers_1.generateStaticRoleExpression(oidcStaticRoles),
            ...generateDynamicAuthReadExpression(oidcDynamicRoles, fields),
        ])));
    }
    totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.ref('util.unauthorized()')));
    return graphql_mapping_template_1.printBlock('Field Authorization Steps')(graphql_mapping_template_1.compoundExpression([...totalAuthExpressions, helpers_1.emptyPayload]));
};
exports.generateAuthExpressionForField = generateAuthExpressionForField;
const generateFieldAuthResponse = (operation, fieldName, subscriptionsEnabled) => {
    if (subscriptionsEnabled) {
        return graphql_mapping_template_1.printBlock('Checking for allowed operations which can return this field')(graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('operation'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.source.get'), graphql_mapping_template_1.str(graphql_model_transformer_1.OPERATION_KEY)), graphql_mapping_template_1.nul())),
            graphql_mapping_template_1.ifElse(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('operation'), graphql_mapping_template_1.str(operation)), graphql_mapping_template_1.toJson(graphql_mapping_template_1.nul()), graphql_mapping_template_1.toJson(graphql_mapping_template_1.ref(`context.source.${fieldName}`))),
        ]));
    }
    return graphql_mapping_template_1.printBlock('Return Source Field')(graphql_mapping_template_1.toJson(graphql_mapping_template_1.ref(`context.source.${fieldName}`)));
};
exports.generateFieldAuthResponse = generateFieldAuthResponse;
const setDeniedFieldFlag = (operation, subscriptionsEnabled) => {
    if (subscriptionsEnabled) {
        return graphql_mapping_template_1.printBlock('Check if subscriptions is protected')(graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.source.get'), graphql_mapping_template_1.str(graphql_model_transformer_1.OPERATION_KEY)), graphql_mapping_template_1.nul()), graphql_mapping_template_1.str(operation)), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.result.put'), graphql_mapping_template_1.str('deniedField'), graphql_mapping_template_1.bool(true)))),
        ]));
    }
    return '';
};
exports.setDeniedFieldFlag = setDeniedFieldFlag;
const generateSandboxExpressionForField = (sandboxEnabled) => {
    let exp;
    if (sandboxEnabled)
        exp = graphql_mapping_template_1.iff(graphql_mapping_template_1.notEquals(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.authType')), graphql_mapping_template_1.str(utils_1.API_KEY_AUTH_TYPE)), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.unauthorized')));
    else
        exp = graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.unauthorized'));
    return graphql_mapping_template_1.printBlock(`Sandbox Mode ${sandboxEnabled ? 'Enabled' : 'Disabled'}`)(graphql_mapping_template_1.compoundExpression([exp, graphql_mapping_template_1.toJson(graphql_mapping_template_1.obj({}))]));
};
exports.generateSandboxExpressionForField = generateSandboxExpressionForField;
//# sourceMappingURL=field.js.map