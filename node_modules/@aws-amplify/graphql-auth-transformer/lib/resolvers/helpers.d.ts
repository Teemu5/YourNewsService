import { Expression } from 'graphql-mapping-template';
import { RoleDefinition } from '../utils';
export declare const setHasAuthExpression: Expression;
export declare const getInputFields: () => Expression;
export declare const getIdentityClaimExp: (value: Expression, defaultValueExp: Expression) => Expression;
export declare const addAllowedFieldsIfElse: (fieldKey: string, breakLoop?: boolean) => Expression;
export declare const iamCheck: (claim: string, exp: Expression, identityPoolId?: string) => import("graphql-mapping-template").IfNode;
export declare const getOwnerClaim: (ownerClaim: string) => Expression;
export declare const responseCheckForErrors: () => import("graphql-mapping-template").IfNode;
export declare const generateStaticRoleExpression: (roles: Array<RoleDefinition>) => Array<Expression>;
export declare const apiKeyExpression: (roles: Array<RoleDefinition>) => import("graphql-mapping-template").IfNode;
export declare const lambdaExpression: (roles: Array<RoleDefinition>) => import("graphql-mapping-template").IfNode;
export declare const iamExpression: (roles: Array<RoleDefinition>, adminRolesEnabled: boolean, adminRoles?: Array<string>, identityPoolId?: string) => import("graphql-mapping-template").IfNode;
export declare const iamAdminRoleCheckExpression: (adminRoles: Array<string>) => Expression;
export declare const generateAuthRequestExpression: () => string;
export declare const emptyPayload: import("graphql-mapping-template").ToJsonNode;
//# sourceMappingURL=helpers.d.ts.map