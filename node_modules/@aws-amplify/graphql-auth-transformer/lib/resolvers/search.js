"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAuthExpressionForSearchQueries = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const helpers_1 = require("./helpers");
const utils_1 = require("../utils");
const graphql_transformer_common_1 = require("graphql-transformer-common");
const allowedAggFieldsList = 'allowedAggFields';
const aggFieldsFilterMap = 'aggFieldsFilterMap';
const totalFields = 'totalFields';
const apiKeyExpression = (roles) => {
    const expression = Array();
    if (roles.length === 0) {
        expression.push(graphql_mapping_template_1.ref('util.unauthorized()'));
    }
    else if (roles[0].allowedFields) {
        expression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`${allowedAggFieldsList}.addAll`), graphql_mapping_template_1.raw(JSON.stringify(roles[0].allowedFields)))));
    }
    else {
        expression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(allowedAggFieldsList), graphql_mapping_template_1.ref(totalFields)));
    }
    return graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.API_KEY_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression(expression));
};
const lambdaExpression = (roles) => {
    const expression = Array();
    if (roles.length === 0) {
        expression.push(graphql_mapping_template_1.ref('util.unauthorized()'));
    }
    else if (roles[0].allowedFields) {
        expression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`${allowedAggFieldsList}.addAll`), graphql_mapping_template_1.raw(JSON.stringify(roles[0].allowedFields)))));
    }
    else {
        expression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(allowedAggFieldsList), graphql_mapping_template_1.ref(totalFields)));
    }
    return graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.LAMBDA_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression(expression));
};
const iamExpression = (roles, hasAdminRolesEnabled = false, adminRoles = [], identityPoolId) => {
    const expression = new Array();
    if (hasAdminRolesEnabled) {
        expression.push(helpers_1.iamAdminRoleCheckExpression(adminRoles));
    }
    if (roles.length === 0) {
        expression.push(graphql_mapping_template_1.ref('util.unauthorized()'));
    }
    else {
        for (let role of roles) {
            const exp = [graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true))];
            if (role.allowedFields) {
                exp.push(graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`${allowedAggFieldsList}.addAll`), graphql_mapping_template_1.raw(JSON.stringify(role.allowedFields)))));
            }
            else {
                exp.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(allowedAggFieldsList), graphql_mapping_template_1.ref(totalFields)));
            }
            expression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), helpers_1.iamCheck(role.claim, graphql_mapping_template_1.compoundExpression(exp), identityPoolId)));
        }
    }
    return graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.IAM_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression(expression));
};
const generateStaticRoleExpression = (roles) => {
    const staticRoleExpression = [];
    let privateRoleIdx = roles.findIndex(r => r.strategy === 'private');
    if (privateRoleIdx > -1) {
        if (roles[privateRoleIdx].allowedFields) {
            staticRoleExpression.push(graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`${allowedAggFieldsList}.addAll`), graphql_mapping_template_1.raw(JSON.stringify(roles[privateRoleIdx].allowedFields)))));
        }
        else {
            staticRoleExpression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(allowedAggFieldsList), graphql_mapping_template_1.ref(totalFields)));
        }
        staticRoleExpression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)));
        roles.splice(privateRoleIdx, 1);
    }
    if (roles.length > 0) {
        staticRoleExpression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('staticGroupRoles'), graphql_mapping_template_1.raw(JSON.stringify(roles.map(r => ({ claim: r.claim, entity: r.entity, ...(r.allowedFields ? { allowedFields: r.allowedFields } : {}) }))))),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('groupRole'), graphql_mapping_template_1.ref('staticGroupRoles'), [
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('groupsInToken'), helpers_1.getIdentityClaimExp(graphql_mapping_template_1.ref('groupRole.claim'), graphql_mapping_template_1.list([]))),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('groupsInToken.contains'), graphql_mapping_template_1.ref('groupRole.entity')), graphql_mapping_template_1.compoundExpression([
                    graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)),
                    graphql_mapping_template_1.ifElse(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.isNull'), graphql_mapping_template_1.ref('groupRole.allowedFields')), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref(allowedAggFieldsList), graphql_mapping_template_1.ref(totalFields)), graphql_mapping_template_1.raw(`#break`)]), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`${allowedAggFieldsList}.addAll`), graphql_mapping_template_1.ref('groupRole.allowedFields')))),
                ])),
            ]),
        ])));
    }
    return staticRoleExpression;
};
const generateAuthFilter = (roles, fields, allowedAggFields) => {
    const filterExpression = new Array();
    const authFilter = new Array();
    const aggFieldMap = {};
    if (!(roles.length > 0))
        return [];
    roles.forEach((role, idx) => {
        const entityIsList = utils_1.fieldIsList(fields, role.entity);
        const roleKey = entityIsList ? role.entity : `${role.entity}.keyword`;
        if (role.strategy === 'owner') {
            filterExpression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`owner${idx}`), graphql_mapping_template_1.obj({
                terms_set: graphql_mapping_template_1.obj({
                    [roleKey]: graphql_mapping_template_1.obj({
                        terms: graphql_mapping_template_1.list([helpers_1.getOwnerClaim(role.claim)]),
                        minimum_should_match_script: graphql_mapping_template_1.obj({ source: graphql_mapping_template_1.str('1') }),
                    }),
                }),
            })));
            authFilter.push(graphql_mapping_template_1.ref(`owner${idx}`));
            if (role.allowedFields) {
                role.allowedFields.forEach(field => {
                    var _a;
                    if (!allowedAggFields.includes(field)) {
                        aggFieldMap[field] = [...((_a = aggFieldMap[field]) !== null && _a !== void 0 ? _a : []), `$owner${idx}`];
                    }
                });
            }
        }
        else if (role.strategy === 'groups') {
            filterExpression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`group${idx}`), graphql_mapping_template_1.obj({
                terms_set: graphql_mapping_template_1.obj({
                    [roleKey]: graphql_mapping_template_1.obj({
                        terms: helpers_1.getIdentityClaimExp(graphql_mapping_template_1.str(role.claim), graphql_mapping_template_1.list([graphql_mapping_template_1.str(graphql_transformer_common_1.NONE_VALUE)])),
                        minimum_should_match_script: graphql_mapping_template_1.obj({ source: graphql_mapping_template_1.str('1') }),
                    }),
                }),
            })));
            authFilter.push(graphql_mapping_template_1.ref(`group${idx}`));
            if (role.allowedFields) {
                role.allowedFields.forEach(field => {
                    var _a;
                    if (!allowedAggFields.includes(field)) {
                        aggFieldMap[field] = [...((_a = aggFieldMap[field]) !== null && _a !== void 0 ? _a : []), `$group${idx}`];
                    }
                });
            }
        }
    });
    filterExpression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.put'), graphql_mapping_template_1.str('authFilter'), graphql_mapping_template_1.obj({ bool: graphql_mapping_template_1.obj({ should: graphql_mapping_template_1.list(authFilter) }) })))));
    if (Object.keys(aggFieldMap).length > 0) {
        filterExpression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.notEquals(graphql_mapping_template_1.ref(`${allowedAggFieldsList}.size()`), graphql_mapping_template_1.ref(`${totalFields}.size()`)), graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.put'), graphql_mapping_template_1.str(aggFieldsFilterMap), graphql_mapping_template_1.raw(JSON.stringify(aggFieldMap).replace(/"\$(.*?)"/g, '$$$1'))))));
    }
    return filterExpression;
};
const generateAuthExpressionForSearchQueries = (providers, roles, fields, allowedAggFields) => {
    const { cognitoStaticRoles, cognitoDynamicRoles, oidcStaticRoles, oidcDynamicRoles, apiKeyRoles, iamRoles, lambdaRoles } = utils_1.splitRoles(roles);
    const totalAuthExpressions = [
        helpers_1.setHasAuthExpression,
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(false)),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref(totalFields), graphql_mapping_template_1.raw(JSON.stringify(fields.map(f => f.name.value)))),
        graphql_mapping_template_1.set(graphql_mapping_template_1.ref(allowedAggFieldsList), graphql_mapping_template_1.raw(JSON.stringify(allowedAggFields))),
    ];
    if (providers.hasApiKey) {
        totalAuthExpressions.push(apiKeyExpression(apiKeyRoles));
    }
    if (providers.hasLambda) {
        totalAuthExpressions.push(lambdaExpression(lambdaRoles));
    }
    if (providers.hasIAM) {
        totalAuthExpressions.push(iamExpression(iamRoles, providers.hasAdminRolesEnabled, providers.adminRoles, providers.identityPoolId));
    }
    if (providers.hasUserPools) {
        totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.COGNITO_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([
            ...generateStaticRoleExpression(cognitoStaticRoles),
            ...generateAuthFilter(cognitoDynamicRoles, fields, allowedAggFields),
        ])));
    }
    if (providers.hasOIDC) {
        totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.OIDC_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([
            ...generateStaticRoleExpression(oidcStaticRoles),
            ...generateAuthFilter(oidcDynamicRoles, fields, allowedAggFields),
        ])));
    }
    totalAuthExpressions.push(graphql_mapping_template_1.qref(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('ctx.stash.put'), graphql_mapping_template_1.str(allowedAggFieldsList), graphql_mapping_template_1.ref(allowedAggFieldsList))), graphql_mapping_template_1.iff(graphql_mapping_template_1.and([graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.isNull'), graphql_mapping_template_1.ref('ctx.stash.authFilter'))]), graphql_mapping_template_1.ref('util.unauthorized()')));
    return graphql_mapping_template_1.printBlock('Authorization Steps')(graphql_mapping_template_1.compoundExpression([...totalAuthExpressions, helpers_1.emptyPayload]));
};
exports.generateAuthExpressionForSearchQueries = generateAuthExpressionForSearchQueries;
//# sourceMappingURL=search.js.map