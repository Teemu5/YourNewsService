"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.geneateAuthExpressionForDelete = void 0;
const graphql_mapping_template_1 = require("graphql-mapping-template");
const helpers_1 = require("./helpers");
const utils_1 = require("../utils");
const apiKeyExpression = (roles) => {
    const expression = new Array();
    if (roles.length === 0) {
        return graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.API_KEY_AUTH_TYPE)), graphql_mapping_template_1.ref('util.unauthorized()'));
    }
    else {
        expression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)));
    }
    return graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.API_KEY_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression(expression));
};
const iamExpression = (roles, hasAdminRolesEnabled = false, adminRoles = [], identityPoolId) => {
    const expression = new Array();
    if (hasAdminRolesEnabled) {
        expression.push(helpers_1.iamAdminRoleCheckExpression(adminRoles));
    }
    if (roles.length > 0) {
        for (let role of roles) {
            expression.push(helpers_1.iamCheck(role.claim, graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), identityPoolId));
        }
    }
    else {
        expression.push(graphql_mapping_template_1.ref('util.unauthorized()'));
    }
    return graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.IAM_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression(expression));
};
const lambdaExpression = (roles) => {
    const expression = new Array();
    if (roles.length === 0) {
        return graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.LAMBDA_AUTH_TYPE)), graphql_mapping_template_1.ref('util.unauthorized()'));
    }
    else {
        expression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)));
    }
    return graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.LAMBDA_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression(expression));
};
const generateStaticRoleExpression = (roles) => {
    const staticRoleExpression = new Array();
    const privateRoleIdx = roles.findIndex(r => r.strategy === 'private');
    if (privateRoleIdx > -1) {
        staticRoleExpression.push(graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)));
        roles.splice(privateRoleIdx, -1);
    }
    if (roles.length > 0) {
        staticRoleExpression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.compoundExpression([
            graphql_mapping_template_1.set(graphql_mapping_template_1.ref('staticGroupRoles'), graphql_mapping_template_1.raw(JSON.stringify(roles.map(r => ({ claim: r.claim, entity: r.entity }))))),
            graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('groupRole'), graphql_mapping_template_1.ref('staticGroupRoles'), [
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref('groupsInToken'), helpers_1.getIdentityClaimExp(graphql_mapping_template_1.ref('groupRole.claim'), graphql_mapping_template_1.list([]))),
                graphql_mapping_template_1.iff(graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('groupsInToken.contains'), graphql_mapping_template_1.ref('groupRole.entity')), graphql_mapping_template_1.compoundExpression([graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)), graphql_mapping_template_1.raw('#break')])),
            ]),
        ])));
    }
    return staticRoleExpression;
};
const dynamicGroupRoleExpression = (roles, fields) => {
    const ownerExpression = new Array();
    const dynamicGroupExpression = new Array();
    roles.forEach((role, idx) => {
        const entityIsList = utils_1.fieldIsList(fields, role.entity);
        if (role.strategy === 'owner') {
            ownerExpression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`ownerEntity${idx}`), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.ref(`ctx.result.${role.entity}`), graphql_mapping_template_1.nul())),
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`ownerClaim${idx}`), helpers_1.getOwnerClaim(role.claim)),
                ...(entityIsList
                    ? [
                        graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('allowedOwner'), graphql_mapping_template_1.ref(`ownerEntity${idx}`), [
                            graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('allowedOwner'), graphql_mapping_template_1.ref(`ownerClaim${idx}`)), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true))),
                        ]),
                    ]
                    : [graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(`ownerEntity${idx}`), graphql_mapping_template_1.ref(`ownerClaim${idx}`)), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true)))]),
            ])));
        }
        if (role.strategy === 'groups') {
            dynamicGroupExpression.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.compoundExpression([
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`groupEntity${idx}`), graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref('util.defaultIfNull'), graphql_mapping_template_1.ref(`ctx.result.${role.entity}`), entityIsList ? graphql_mapping_template_1.list([]) : graphql_mapping_template_1.nul())),
                graphql_mapping_template_1.set(graphql_mapping_template_1.ref(`groupClaim${idx}`), helpers_1.getIdentityClaimExp(graphql_mapping_template_1.str(role.claim), graphql_mapping_template_1.list([]))),
                graphql_mapping_template_1.forEach(graphql_mapping_template_1.ref('userGroup'), graphql_mapping_template_1.ref(`groupClaim${idx}`), [
                    graphql_mapping_template_1.iff(entityIsList
                        ? graphql_mapping_template_1.methodCall(graphql_mapping_template_1.ref(`groupEntity${idx}.contains`), graphql_mapping_template_1.ref('userGroup'))
                        : graphql_mapping_template_1.equals(graphql_mapping_template_1.ref(`groupEntity${idx}`), graphql_mapping_template_1.ref('userGroup')), graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(true))),
                ]),
            ])));
        }
    });
    return [...(ownerExpression.length > 0 ? ownerExpression : []), ...(dynamicGroupExpression.length > 0 ? dynamicGroupExpression : [])];
};
const geneateAuthExpressionForDelete = (providers, roles, fields) => {
    const { cognitoStaticRoles, cognitoDynamicRoles, oidcStaticRoles, oidcDynamicRoles, apiKeyRoles, iamRoles, lambdaRoles } = utils_1.splitRoles(roles);
    const totalAuthExpressions = [helpers_1.setHasAuthExpression, graphql_mapping_template_1.set(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG), graphql_mapping_template_1.bool(false))];
    if (providers.hasApiKey) {
        totalAuthExpressions.push(apiKeyExpression(apiKeyRoles));
    }
    if (providers.hasIAM) {
        totalAuthExpressions.push(iamExpression(iamRoles, providers.hasAdminRolesEnabled, providers.adminRoles, providers.identityPoolId));
    }
    if (providers.hasLambda) {
        totalAuthExpressions.push(lambdaExpression(lambdaRoles));
    }
    if (providers.hasUserPools) {
        totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.COGNITO_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([
            ...generateStaticRoleExpression(cognitoStaticRoles),
            ...dynamicGroupRoleExpression(cognitoDynamicRoles, fields),
        ])));
    }
    if (providers.hasOIDC) {
        totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.equals(graphql_mapping_template_1.ref('util.authType()'), graphql_mapping_template_1.str(utils_1.OIDC_AUTH_TYPE)), graphql_mapping_template_1.compoundExpression([...generateStaticRoleExpression(oidcStaticRoles), ...dynamicGroupRoleExpression(oidcDynamicRoles, fields)])));
    }
    totalAuthExpressions.push(graphql_mapping_template_1.iff(graphql_mapping_template_1.not(graphql_mapping_template_1.ref(utils_1.IS_AUTHORIZED_FLAG)), graphql_mapping_template_1.ref('util.unauthorized()')));
    return graphql_mapping_template_1.printBlock('Authorization Steps')(graphql_mapping_template_1.compoundExpression([...totalAuthExpressions, helpers_1.emptyPayload]));
};
exports.geneateAuthExpressionForDelete = geneateAuthExpressionForDelete;
//# sourceMappingURL=mutation.delete.js.map