import { TransformerAuthBase } from '@aws-amplify/graphql-transformer-core';
import { TransformerTransformSchemaStepContextProvider, TransformerContextProvider, TransformerSchemaVisitStepContextProvider, TransformerAuthProvider, TransformerBeforeStepContextProvider } from '@aws-amplify/graphql-transformer-interfaces';
import { AuthTransformerConfig, RoleDefinition } from './utils';
import { DirectiveNode, FieldDefinitionNode, ObjectTypeDefinitionNode, InterfaceTypeDefinitionNode } from 'graphql';
import { AccessControlMatrix } from './accesscontrol';
export declare class AuthTransformer extends TransformerAuthBase implements TransformerAuthProvider {
    private config;
    private configuredAuthProviders;
    private roleMap;
    private authModelConfig;
    private authNonModelConfig;
    private modelDirectiveConfig;
    private seenNonModelTypes;
    private generateIAMPolicyforUnauthRole;
    private generateIAMPolicyforAuthRole;
    private authPolicyResources;
    private unauthPolicyResources;
    constructor(config?: AuthTransformerConfig);
    before: (context: TransformerBeforeStepContextProvider) => void;
    object: (def: ObjectTypeDefinitionNode, directive: DirectiveNode, context: TransformerSchemaVisitStepContextProvider) => void;
    field: (parent: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode, field: FieldDefinitionNode, directive: DirectiveNode, context: TransformerSchemaVisitStepContextProvider) => void;
    transformSchema: (context: TransformerTransformSchemaStepContextProvider) => void;
    generateResolvers: (context: TransformerContextProvider) => void;
    protectSchemaOperations: (ctx: TransformerTransformSchemaStepContextProvider, def: ObjectTypeDefinitionNode, acm: AccessControlMatrix) => void;
    protectGetResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectListResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix, indexName?: string) => void;
    protectRelationalResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, field: FieldDefinitionNode, fieldRoles: Array<string> | null) => void;
    protectSyncResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectSearchResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectFieldResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, roles: Array<string>) => void;
    protectCreateResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectUpdateResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectDeleteResolver: (ctx: TransformerContextProvider, def: ObjectTypeDefinitionNode, typeName: string, fieldName: string, acm: AccessControlMatrix) => void;
    protectSubscriptionResolver: (ctx: TransformerContextProvider, typeName: string, fieldName: string, subscriptionRoles: Array<RoleDefinition>) => void;
    private convertRulesToRoles;
    private doesTypeHaveRulesForOperation;
    private getAuthProviders;
    private getRelatedModelObject;
    private addFieldsToObject;
    private propagateAuthDirectivesToNestedTypes;
    private getServiceDirectives;
    private shouldAddDefaultServiceDirective;
    private generateIAMPolicies;
    private setAuthPolicyFlag;
    private setUnauthPolicyFlag;
    private addOperationToResourceReferences;
    private addTypeToResourceReferences;
    private addFieldToResourceReferences;
}
//# sourceMappingURL=graphql-auth-transformer.d.ts.map