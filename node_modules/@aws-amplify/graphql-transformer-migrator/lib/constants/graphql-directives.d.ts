export declare const GRAPHQL_DIRECTIVES_SCHEMA = "\ndirective @model(\n  queries: ModelQueryMap\n  mutations: ModelMutationMap\n  subscriptions: ModelSubscriptionMap\n  timestamps: TimestampConfiguration\n) on OBJECT\ninput ModelMutationMap {\n  create: String\n  update: String\n  delete: String\n}\ninput ModelQueryMap {\n  get: String\n  list: String\n}\ninput ModelSubscriptionMap {\n  onCreate: [String]\n  onUpdate: [String]\n  onDelete: [String]\n  level: ModelSubscriptionLevel\n}\nenum ModelSubscriptionLevel {\n  off\n  public\n  on\n}\ninput TimestampConfiguration {\n  createdAt: String\n  updatedAt: String\n}\n\ndirective @function(name: String!, region: String) repeatable on FIELD_DEFINITION\n\ndirective @http(method: HttpMethod = GET, url: String!, headers: [HttpHeader] = []) on FIELD_DEFINITION\nenum HttpMethod {\n  GET\n  POST\n  PUT\n  DELETE\n  PATCH\n}\ninput HttpHeader {\n  key: String\n  value: String\n}\n\ndirective @key(name: String, fields: [String!]!, queryField: String) repeatable on OBJECT\n\ndirective @connection(\n  name: String\n  keyField: String\n  sortField: String\n  keyName: String\n  limit: Int\n  fields: [String!]\n) on FIELD_DEFINITION\n\ndirective @predictions(actions: [PredictionsActions!]!) on FIELD_DEFINITION\nenum PredictionsActions {\n  identifyText\n  identifyLabels\n  convertTextToSpeech\n  translateText\n}\n\ndirective @searchable(queries: SearchableQueryMap) on OBJECT\ninput SearchableQueryMap {\n  search: String\n}\n\ndirective @auth(rules: [AuthRule!]!) on OBJECT | FIELD_DEFINITION\ninput AuthRule {\n  # Specifies the auth rule's strategy. Allowed values are 'owner', 'groups', 'public', 'private'.\n  allow: AuthStrategy!\n\n  # Legacy name for identityClaim\n  identityField: String @deprecated(reason: \"The 'identityField' argument is replaced by the 'identityClaim'.\")\n\n  # Specifies the name of the provider to use for the rule. This overrides the default provider\n  # when 'public' and 'private' AuthStrategy is used. Specifying a provider for 'owner' or 'groups'\n  # are not allowed.\n  provider: AuthProvider\n\n  # Specifies the name of the claim to look for on the request's JWT token\n  # from Cognito User Pools (and in the future OIDC) that contains the identity\n  # of the user. If 'allow' is 'groups', this value should point to a list of groups\n  # in the claims. If 'allow' is 'owner', this value should point to the logged in user identity string.\n  # Defaults to \"cognito:username\" for Cognito User Pools auth.\n  identityClaim: String\n\n  # Allows for custom config of 'groups' which is validated against the JWT\n  # Specifies a static list of groups that should have access to the object\n  groupClaim: String\n\n  # Allowed when the 'allow' argument is 'owner'.\n  # Specifies the field of type String or [String] that contains owner(s) that can access the object.\n  ownerField: String # defaults to \"owner\"\n  # Allowed when the 'allow' argument is 'groups'.\n  # Specifies the field of type String or [String] that contains group(s) that can access the object.\n  groupsField: String\n\n  # Allowed when the 'allow' argument is 'groups'.\n  # Specifies a static list of groups that should have access to the object.\n  groups: [String]\n\n  # Specifies operations to which this auth rule should be applied.\n  operations: [ModelOperation]\n\n  # Deprecated. It is recommended to use the 'operations' arguments.\n  queries: [ModelQuery]\n    @deprecated(reason: \"The 'queries' argument will be replaced by the 'operations' argument in a future release.\")\n\n  # Deprecated. It is recommended to use the 'operations' arguments.\n  mutations: [ModelMutation]\n    @deprecated(reason: \"The 'mutations' argument will be replaced by the 'operations' argument in a future release.\")\n}\nenum AuthStrategy {\n  owner\n  groups\n  private\n  public\n}\nenum AuthProvider {\n  apiKey\n  iam\n  oidc\n  userPools\n}\nenum ModelOperation {\n  create\n  update\n  delete\n  read\n}\nenum ModelQuery @deprecated(reason: \"ModelQuery will be replaced by the 'ModelOperation' in a future release.\") {\n  get\n  list\n}\nenum ModelMutation @deprecated(reason: \"ModelMutation will be replaced by the 'ModelOperation' in a future release.\") {\n  create\n  update\n  delete\n}\n";
//# sourceMappingURL=graphql-directives.d.ts.map