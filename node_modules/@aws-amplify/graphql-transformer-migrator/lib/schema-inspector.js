"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTransformerV2Enabled = exports.isImprovedPluralizationEnabled = exports.detectDeprecatedConnectionUsage = exports.detectPassthroughDirectives = exports.detectOverriddenResolvers = exports.detectCustomRootTypes = exports.graphQLUsingSQL = void 0;
const amplify_cli_core_1 = require("amplify-cli-core");
const graphql_1 = require("graphql");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const utils_1 = require("./utils");
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
function graphQLUsingSQL(apiName) {
    var _a, _b, _c, _d;
    const teamProviderInfo = amplify_cli_core_1.stateManager.getTeamProviderInfo();
    const env = amplify_cli_core_1.stateManager.getLocalEnvInfo().envName;
    if ((_d = (_c = (_b = (_a = teamProviderInfo === null || teamProviderInfo === void 0 ? void 0 : teamProviderInfo[env]) === null || _a === void 0 ? void 0 : _a.categories) === null || _b === void 0 ? void 0 : _b.api) === null || _c === void 0 ? void 0 : _c[apiName]) === null || _d === void 0 ? void 0 : _d.rdsClusterIdentifier) {
        return true;
    }
    return false;
}
exports.graphQLUsingSQL = graphQLUsingSQL;
function detectCustomRootTypes(schema) {
    let customResolversUsed = false;
    graphql_1.visit(schema, {
        ObjectTypeDefinition: {
            enter(node) {
                if (node.name.value === 'Mutation' || node.name.value === 'Query' || node.name.value === 'Subscription') {
                    customResolversUsed = true;
                }
            },
        },
    });
    return customResolversUsed;
}
exports.detectCustomRootTypes = detectCustomRootTypes;
function detectOverriddenResolvers(apiName) {
    const resolversDir = path.join(amplify_cli_core_1.pathManager.getResourceDirectoryPath(undefined, 'api', apiName), 'resolvers');
    if (!fs.existsSync(resolversDir)) {
        return false;
    }
    const vtlFiles = fs.readdirSync(resolversDir).filter(file => file.endsWith('.vtl'));
    return !!vtlFiles.length;
}
exports.detectOverriddenResolvers = detectOverriddenResolvers;
async function detectPassthroughDirectives(schema) {
    const supportedDirectives = new Set([
        'connection',
        'key',
        'searchable',
        'auth',
        'model',
        'function',
        'predictions',
        'aws_subscribe',
    ]);
    const directiveMap = graphql_transformer_core_1.collectDirectivesByTypeNames(schema).types;
    let passthroughDirectiveSet = new Set();
    for (let type of Object.keys(directiveMap)) {
        for (let dirName of utils_1.listContainsOnlySetString(directiveMap[type], supportedDirectives)) {
            passthroughDirectiveSet.add(dirName);
        }
    }
    return Array.from(passthroughDirectiveSet);
}
exports.detectPassthroughDirectives = detectPassthroughDirectives;
function detectDeprecatedConnectionUsage(schema) {
    var _a;
    const directives = graphql_transformer_core_1.collectDirectives(schema);
    const deprecatedConnectionArgs = ['name', 'keyField', 'sortField', 'limit'];
    const connectionDirectives = directives.filter(directive => directive.name.value === 'connection');
    for (const connDir of connectionDirectives) {
        if ((_a = connDir.arguments) === null || _a === void 0 ? void 0 : _a.some(arg => deprecatedConnectionArgs.includes(arg.name.value))) {
            return true;
        }
    }
    return false;
}
exports.detectDeprecatedConnectionUsage = detectDeprecatedConnectionUsage;
function isImprovedPluralizationEnabled() {
    return amplify_cli_core_1.FeatureFlags.getBoolean('graphqltransformer.improvepluralization');
}
exports.isImprovedPluralizationEnabled = isImprovedPluralizationEnabled;
function isTransformerV2Enabled() {
    return amplify_cli_core_1.FeatureFlags.getNumber('graphqltransformer.transformerversion') === 2;
}
exports.isTransformerV2Enabled = isTransformerV2Enabled;
//# sourceMappingURL=schema-inspector.js.map