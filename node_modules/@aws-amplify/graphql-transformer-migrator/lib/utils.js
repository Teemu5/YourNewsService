"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listContainsOnlySetString = exports.getDefaultAuth = exports.combineSchemas = exports.replaceFile = void 0;
const fs = __importStar(require("fs-extra"));
const amplify_cli_core_1 = require("amplify-cli-core");
async function replaceFile(newSchema, filePath) {
    await fs.writeFile(filePath, newSchema, { encoding: 'utf-8', flag: 'w' });
}
exports.replaceFile = replaceFile;
function combineSchemas(schemaDocs) {
    let schemaList = new Array(schemaDocs.length);
    schemaDocs.forEach((doc, idx) => {
        schemaList[idx] = doc.schema;
    });
    return schemaList.join('\n');
}
exports.combineSchemas = combineSchemas;
async function getDefaultAuth() {
    const backendConfig = amplify_cli_core_1.stateManager.getBackendConfig();
    if (Object.keys(backendConfig.api).length < 1) {
        return 'AMAZON_COGNITO_USER_POOLS';
    }
    const firstAPIID = Object.keys(backendConfig.api)[0];
    return backendConfig.api[firstAPIID].output.authConfig.defaultAuthentication.authenticationType;
}
exports.getDefaultAuth = getDefaultAuth;
function listContainsOnlySetString(list, set) {
    return list.filter(str => {
        return !set.has(str);
    });
}
exports.listContainsOnlySetString = listContainsOnlySetString;
//# sourceMappingURL=utils.js.map