"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.doesBackupExist = exports.restoreSchemas = exports.backupSchemas = exports.backupLocation = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const backupLocation = (resourceDir) => path.join(resourceDir, '.migration-backup');
exports.backupLocation = backupLocation;
const backupSchemas = async (resourceDir) => {
    const schemaFilePath = path.join(resourceDir, 'schema.graphql');
    const schemaDirPath = path.join(resourceDir, 'schema');
    const schemaFileExists = fs.existsSync(schemaFilePath);
    const schemaDirectoryExists = fs.existsSync(schemaDirPath);
    if (schemaFileExists) {
        await fs.copy(schemaFilePath, path.join(exports.backupLocation(resourceDir), 'schema.graphql'), { overwrite: false, errorOnExist: true });
        return;
    }
    if (schemaDirectoryExists) {
        await fs.copy(schemaDirPath, path.join(exports.backupLocation(resourceDir), 'schema'), { overwrite: false, errorOnExist: true });
    }
};
exports.backupSchemas = backupSchemas;
const restoreSchemas = async (resourceDir) => {
    await fs.copy(exports.backupLocation(resourceDir), resourceDir);
    await fs.remove(exports.backupLocation(resourceDir));
};
exports.restoreSchemas = restoreSchemas;
function doesBackupExist(resourceDir) {
    return fs.existsSync(exports.backupLocation(resourceDir));
}
exports.doesBackupExist = doesBackupExist;
//# sourceMappingURL=schema-backup.js.map