"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateKeys = exports.migrateSecondaryKey = exports.isSecondaryKey = exports.migratePrimaryKey = exports.isPrimaryKey = void 0;
const generators_1 = require("../generators");
function isPrimaryKey(directive) {
    return (directive.name.value === 'key'
        && directive.arguments.some((a) => a.name.value === "fields")
        && !directive.arguments.some((a) => a.name.value === "name"));
}
exports.isPrimaryKey = isPrimaryKey;
function migratePrimaryKey(node, directive) {
    let fields = directive.arguments.find((i) => i.name.value === "fields");
    const fieldIndex = node.fields.findIndex((field) => field.name.value === fields.value.values[0].value);
    let args = [];
    if (fields.value.values.length !== 1) {
        args = [generators_1.createArgumentNode('sortKeyFields', {
                ...fields.value,
                values: fields.value.values.slice(1)
            })];
    }
    node.fields[fieldIndex].directives.push(generators_1.createDirectiveNode('primaryKey', args));
}
exports.migratePrimaryKey = migratePrimaryKey;
function isSecondaryKey(directive) {
    return (directive.name.value === 'key'
        && directive.arguments.some((a) => a.name.value === "fields")
        && directive.arguments.some((a) => a.name.value === "name"));
}
exports.isSecondaryKey = isSecondaryKey;
function migrateSecondaryKey(node, directive) {
    let fields = directive.arguments.find((i) => i.name.value === "fields");
    const fieldIndex = node.fields.findIndex((field) => field.name.value === fields.value.values[0].value);
    let args = directive.arguments.filter((i) => i.name.value !== "fields");
    if (fields.value.values.length !== 1) {
        args = [...args, generators_1.createArgumentNode('sortKeyFields', {
                ...fields.value,
                values: fields.value.values.slice(1)
            })];
    }
    node.fields[fieldIndex].directives.push(generators_1.createDirectiveNode('index', args));
}
exports.migrateSecondaryKey = migrateSecondaryKey;
function migrateKeys(node) {
    const dirs = node.directives;
    if (!dirs) {
        return;
    }
    let keys = [];
    for (const dir of dirs) {
        if (dir.name.value === 'key') {
            keys.push(dir);
        }
    }
    node.directives = dirs.filter((dir) => dir.name.value !== "key");
    for (const index of keys) {
        if (isPrimaryKey(index)) {
            migratePrimaryKey(node, index);
        }
        else if (isSecondaryKey(index)) {
            migrateSecondaryKey(node, index);
        }
    }
}
exports.migrateKeys = migrateKeys;
//# sourceMappingURL=index.js.map