"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateOwnerAuth = void 0;
const _1 = require(".");
const generators_1 = require("../generators");
function getPrivateAuthRule(rules, provider) {
    return rules.find((rule) => {
        var _a, _b, _c, _d;
        const foundStrategy = (_b = (_a = rule.fields.find((f) => f.name.value === 'allow')) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.value;
        const foundProvider = (_d = (_c = rule.fields.find((f) => f.name.value === 'provider')) === null || _c === void 0 ? void 0 : _c.value) === null || _d === void 0 ? void 0 : _d.value;
        if (foundStrategy !== 'private') {
            return false;
        }
        if (provider === 'userPools' && (foundProvider === undefined || foundProvider === 'userPools')) {
            return true;
        }
        else if (provider === 'iam' && foundProvider === 'iam') {
            return true;
        }
        return false;
    });
}
function getOwnerAuthRules(rules) {
    return rules.filter((rule) => { var _a, _b; return ((_b = (_a = rule.fields.find((f) => { var _a; return ((_a = f === null || f === void 0 ? void 0 : f.name) === null || _a === void 0 ? void 0 : _a.value) === 'allow'; })) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.value) === 'owner'; });
}
function getGroupAuthRules(rules) {
    return rules.filter((rule) => { var _a, _b; return ((_b = (_a = rule.fields.find((f) => { var _a; return ((_a = f === null || f === void 0 ? void 0 : f.name) === null || _a === void 0 ? void 0 : _a.value) === 'allow'; })) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.value) === 'groups'; });
}
const ops = ['create', 'read', 'update', 'delete'];
function migrateOwnerAuth(node, defaultAuthMode) {
    const authRules = _1.getAuthRules(node);
    const deniedOperations = new Set();
    const userBasedRulesWithProtection = getOwnerAuthRules(authRules).concat(getGroupAuthRules(authRules));
    if (userBasedRulesWithProtection.length === 0)
        return;
    userBasedRulesWithProtection.forEach((rule) => {
        const operationsFieldIndex = rule.fields.findIndex((f) => f.name.value === 'operations');
        if (operationsFieldIndex === -1) {
            ops.forEach(op => deniedOperations.add(op));
        }
        else {
            rule.fields[operationsFieldIndex].value.values.forEach((op) => deniedOperations.add(op.value));
            if (userBasedRulesWithProtection.length === 1)
                rule.fields.splice(operationsFieldIndex, 1);
        }
    });
    const hasAllImplicitOperations = deniedOperations.size === 4;
    const privateRule = getPrivateAuthRule(authRules, defaultAuthMode);
    if (hasAllImplicitOperations || privateRule)
        return;
    const explicitOperations = ops.filter(x => !deniedOperations.has(x));
    authRules.push(generators_1.createAuthRule('private', defaultAuthMode, explicitOperations));
}
exports.migrateOwnerAuth = migrateOwnerAuth;
//# sourceMappingURL=ownerAuth.js.map