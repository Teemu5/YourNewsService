{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../src/commands/auth/update.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  $TSAny,\n  $TSContext,\n  AmplifyCategories,\n  AmplifySupportedService,\n  BannerMessage,\n  FeatureFlags,\n  stateManager,\n} from 'amplify-cli-core';\nimport { printer } from 'amplify-prompts';\nimport _ from 'lodash';\nimport { category } from '../..';\nimport { messages } from '../../provider-utils/awscloudformation/assets/string-maps';\nimport * as providerController from '../../provider-utils/awscloudformation/index';\nimport { checkAuthResourceMigration } from '../../provider-utils/awscloudformation/utils/check-for-auth-migration';\nimport { getSupportedServices } from '../../provider-utils/supported-services';\nimport { getAuthResourceName } from '../../utils/getAuthResourceName';\n\nexport const name = 'update';\nexport const alias = ['update'];\n\nexport const run = async (context: $TSContext) => {\n  const { amplify } = context;\n  const servicesMetadata = getSupportedServices();\n  const meta = stateManager.getMeta();\n  const existingAuth = meta.auth ?? {};\n  if (_.isEmpty(existingAuth)) {\n    return printer.warn('Project does not contain auth resources. Add auth using `amplify add auth`.');\n  } else {\n    const authResources = Object.keys(existingAuth);\n    for (const authResourceName of authResources) {\n      const serviceMeta = existingAuth[authResourceName];\n      if (serviceMeta.service === AmplifySupportedService.COGNITO && serviceMeta.mobileHubMigrated === true) {\n        printer.error('Auth is migrated from Mobile Hub and cannot be updated with Amplify CLI.');\n        return context;\n      } else if (serviceMeta.service === AmplifySupportedService.COGNITO && serviceMeta.serviceType === 'imported') {\n        printer.error('Updating imported Auth resource is not supported.');\n        return context;\n      } else if (serviceMeta.service === AmplifySupportedService.COGNITO && !FeatureFlags.getBoolean('auth.forceAliasAttributes')) {\n        const authAttributes = stateManager.getResourceParametersJson(undefined, AmplifyCategories.AUTH, authResourceName);\n        if (authAttributes.aliasAttributes && authAttributes.aliasAttributes.length > 0) {\n          const authUpdateWarning = await BannerMessage.getMessage('AMPLIFY_UPDATE_AUTH_ALIAS_ATTRIBUTES_WARNING');\n          if (authUpdateWarning) {\n            printer.warn(authUpdateWarning);\n          }\n        }\n      }\n    }\n  }\n\n  printer.info('Please note that certain attributes may not be overwritten if you choose to use defaults settings.');\n  const dependentResources = Object.keys(meta).some(e => {\n    return ['analytics', 'api', 'storage', 'function'].includes(e) && Object.keys(meta[e]).length > 0;\n  });\n  if (dependentResources) {\n    printer.info(messages.dependenciesExists);\n  }\n  const resourceName = await getAuthResourceName(context);\n  await checkAuthResourceMigration(context, resourceName, true);\n  const providerPlugin = context.amplify.getPluginInstance(context, servicesMetadata.Cognito.provider);\n  context.updatingAuth = providerPlugin.loadResourceParameters(context, 'auth', resourceName);\n\n  try {\n    const result = await amplify.serviceSelectionPrompt(context, category, getSupportedServices());\n    const options = {\n      service: result.service,\n      providerPlugin: result.providerName,\n      resourceName,\n    };\n    if (!providerController) {\n      printer.error('Provider not configured for this category');\n      return;\n    }\n    const updateResourceResponse = await providerController.updateResource(context, options);\n    printer.success(`Successfully updated resource ${name} locally`);\n    printer.blankLine();\n    printer.success('Some next steps:');\n    printer.info('\"amplify push\" will build all your local backend resources and provision it in the cloud');\n    printer.info(\n      '\"amplify publish\" will build all your local backend and frontend resources (if you have hosting category added) and provision it in the cloud',\n    );\n    printer.blankLine();\n    return updateResourceResponse;\n  } catch (err: $TSAny) {\n    printer.info(err.stack);\n    printer.error('There was an error adding the auth resource');\n    context.usageData.emitError(err);\n    process.exitCode = 1;\n  }\n};\n"]}