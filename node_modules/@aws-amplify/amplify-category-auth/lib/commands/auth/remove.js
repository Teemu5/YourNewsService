"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.name = void 0;
exports.name = 'remove';
const category = 'auth';
const amplify_cli_core_1 = require("amplify-cli-core");
const amplify_prompts_1 = require("amplify-prompts");
const string_maps_1 = require("../../provider-utils/awscloudformation/assets/string-maps");
const auth_input_state_1 = require("../../provider-utils/awscloudformation/auth-inputs-manager/auth-input-state");
const run = async (context) => {
    const { amplify, parameters } = context;
    const resourceName = parameters.first;
    const meta = amplify_cli_core_1.stateManager.getMeta();
    const dependentResources = Object.keys(meta).some(e => {
        return ['analytics', 'api', 'storage', 'function'].includes(e) && Object.keys(meta[e]).length > 0;
    });
    if (dependentResources) {
        amplify_prompts_1.printer.info(string_maps_1.messages.dependenciesExists);
    }
    const authResourceName = Object.keys(meta.auth).filter(resourceKey => {
        return meta.auth[resourceKey].service === amplify_cli_core_1.AmplifySupportedService.COGNITO;
    });
    try {
        const resource = await amplify.removeResource(context, category, resourceName);
        if ((resource === null || resource === void 0 ? void 0 : resource.service) === amplify_cli_core_1.AmplifySupportedService.COGNITOUSERPOOLGROUPS) {
            const cliState = new auth_input_state_1.AuthInputState(authResourceName[0]);
            const cliInputPayload = cliState.getCLIInputPayload();
            cliInputPayload.cognitoConfig.userPoolGroupList = [];
            cliState.saveCLIInputPayload(cliInputPayload);
        }
    }
    catch (err) {
        amplify_prompts_1.printer.info(err.stack);
        amplify_prompts_1.printer.error('There was an error removing the auth resource');
        context.usageData.emitError(err);
        process.exitCode = 1;
    }
};
exports.run = run;
//# sourceMappingURL=remove.js.map