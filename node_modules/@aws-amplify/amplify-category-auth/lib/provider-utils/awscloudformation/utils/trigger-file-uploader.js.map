{"version":3,"file":"trigger-file-uploader.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/trigger-file-uploader.js"],"names":[],"mappings":"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","sourcesContent":["const { readdirSync, existsSync } = require('fs');\nconst { createReadStream } = require('fs-extra');\nconst Ora = require('ora');\nconst mime = require('mime-types');\nconst { stateManager } = require('amplify-cli-core');\nconst sequential = require('promise-sequential');\nconst { getAuthResourceName } = require('../../../utils/getAuthResourceName');\n\nconst providerName = 'awscloudformation';\n\nasync function getS3Client(context, action) {\n  const providerPlugins = context.amplify.getProviderPlugins(context);\n  const provider = require(providerPlugins[providerName]);\n  const aws = await provider.getConfiguredAWSClient(context, 'auth', action);\n  return new aws.S3();\n}\n\nasync function uploadFiles(context) {\n  try {\n    const s3Client = await getS3Client(context, 'update');\n    const authResource = await getAuthResourceName(context);\n    const authPath = `${context.amplify.pathManager.getAmplifyDirPath()}/backend/auth/${authResource}`;\n    if (!authPath) {\n      return null;\n    }\n    const assetPath = `${authPath}/assets`;\n    const env = context.amplify.getEnvInfo().envName;\n\n    const authParams = stateManager.getResourceParametersJson(undefined, 'auth', authResource);\n    const bucketName = `${authParams.verificationBucketName}-${env}`;\n\n    if (!existsSync(assetPath)) {\n      return null;\n    }\n    const fileList = readdirSync(assetPath);\n    const uploadFileTasks = [];\n    fileList.forEach(file => {\n      uploadFileTasks.push(async () => await uploadFile(s3Client, bucketName, `${assetPath}/${file}`, file));\n    });\n\n    const spinner = new Ora('Uploading files...');\n    try {\n      spinner.start();\n      await sequential(uploadFileTasks);\n      spinner.succeed('Uploaded files successfully.');\n    } catch (e) {\n      spinner.fail('Error has occurred during file upload.');\n      throw e;\n    }\n  } catch (e) {\n    console.log(e.stack);\n    throw new Error('Unable to upload trigger files to S3');\n  }\n}\n\nasync function uploadFile(s3Client, hostingBucketName, filePath, file) {\n  const fileStream = createReadStream(filePath);\n  const contentType = mime.lookup(filePath);\n  const uploadParams = {\n    Bucket: hostingBucketName,\n    Key: file,\n    Body: fileStream,\n    ContentType: contentType || 'text/plain',\n    ACL: 'public-read',\n  };\n\n  const data = await s3Client\n    .upload(uploadParams)\n    .promise()\n    .catch(e => {\n      console.log('e', e);\n      throw e;\n    });\n\n  return data;\n}\n\nmodule.exports = {\n  uploadFiles,\n};\n"]}