{"version":3,"file":"transform-user-pool-group.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/transform-user-pool-group.js"],"names":[],"mappings":";AAAA,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC7B,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,MAAM,EAAE,kCAAkC,EAAE,GAAG,OAAO,CAAC,2CAA2C,CAAC,CAAC;AACpG,MAAM,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC,yCAAyC,CAAC,CAAC;AAE9E,KAAK,UAAU,4BAA4B,CAAC,OAAO;IACjD,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAC/B,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,iBAAiB,EAAE,EAC/C,MAAM,EACN,gBAAgB,EAChB,iCAAiC,CAClC,CAAC;IAEF,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;IACnE,MAAM,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC;IACrF,IAAI,gBAAgB,CAAC;IAErB,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3B,MAAM,QAAQ,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;QACjC,gBAAgB,GAAG,QAAQ,CAAC,YAAY,CAAC;KAC1C;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACrD;IAED,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;IAI7D,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACrB,IAAI,KAAK,CAAC,cAAc,EAAE;YACxB,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACpC,IAAI,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE;oBAC5D,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;wBAElD,IAAI,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;4BAEzC,SAAS,CAAC,QAAQ,GAAG,EAAE,SAAS,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC;yBACnF;oBACH,CAAC,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,kCAAkC,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;AACtE,CAAC;AAED,MAAM,CAAC,OAAO,GAAG;IACf,4BAA4B;CAC7B,CAAC","sourcesContent":["const path = require('path');\nconst fs = require('fs');\nconst { generateUserPoolGroupStackTemplate } = require('./generate-user-pool-group-stack-template');\nconst { AuthInputState } = require('../auth-inputs-manager/auth-input-state');\n\nasync function transformUserPoolGroupSchema(context) {\n  const resourceDirPath = path.join(\n    context.amplify.pathManager.getBackendDirPath(),\n    'auth',\n    'userPoolGroups',\n    'user-pool-group-precedence.json',\n  );\n\n  const { allResources } = await context.amplify.getResourceStatus();\n  const authResource = allResources.filter(resource => resource.service === 'Cognito');\n  let authResourceName;\n\n  if (authResource.length > 0) {\n    const resource = authResource[0];\n    authResourceName = resource.resourceName;\n  } else {\n    throw new Error('Cognito UserPool does not exists');\n  }\n\n  const groups = context.amplify.readJsonFile(resourceDirPath);\n\n  // Replace env vars with subs\n\n  groups.forEach(group => {\n    if (group.customPolicies) {\n      group.customPolicies.forEach(policy => {\n        if (policy.PolicyDocument && policy.PolicyDocument.Statement) {\n          policy.PolicyDocument.Statement.forEach(statement => {\n            // eslint-disable-next-line\n            if (statement.Resource.includes('${env}')) {\n              // eslint-disable-line\n              statement.Resource = { 'Fn::Sub': [statement.Resource, { env: { Ref: 'env' } }] };\n            }\n          });\n        }\n      });\n    }\n  });\n\n  await generateUserPoolGroupStackTemplate(context, authResourceName);\n}\n\nmodule.exports = {\n  transformUserPoolGroupSchema,\n};\n"]}