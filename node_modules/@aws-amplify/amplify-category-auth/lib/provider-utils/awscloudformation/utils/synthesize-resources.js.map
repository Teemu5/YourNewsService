{"version":3,"file":"synthesize-resources.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/utils/synthesize-resources.ts"],"names":[],"mappings":"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","sourcesContent":["import { AuthTriggerConfig, AuthTriggerConnection } from '../service-walkthrough-types/cognito-user-input-types';\nimport * as path from 'path';\nimport { existsSync, copySync, outputFileSync } from 'fs-extra';\nimport uuid from 'uuid';\nimport { cfnTemplateRoot, privateKeys, adminAuthAssetRoot, triggerRoot } from '../constants';\nimport { pathManager, JSONUtilities, FeatureFlags, $TSAny } from 'amplify-cli-core';\nimport { get } from 'lodash';\nimport { generateUserPoolGroupStackTemplate } from './generate-user-pool-group-stack-template';\nimport { CognitoConfiguration } from '../service-walkthrough-types/awsCognito-user-input-types';\n\n// keep in sync with ServiceName in amplify-category-function, but probably it will not change\nconst FunctionServiceNameLambdaFunction = 'Lambda';\n\n/**\n * Factory function that returns a function that synthesizes all resources based on a CognitoCLIInputs request.\n * The function returns the request unchanged to enable .then() chaining\n * @param context The amplify context\n * @param cfnFilename The template CFN filename\n * @param provider The cloud provider name\n */\nexport const getResourceSynthesizer = async (context: any, request: Readonly<CognitoConfiguration>) => {\n  await lambdaTriggers(request, context, null);\n  // transformation handled in api and functions.\n  await addAdminAuth(context, request.resourceName!, 'add', request.adminQueryGroup);\n  // copy custom-message trigger files in to S3\n  await copyS3Assets(request);\n  return request;\n};\n\n/**\n * Factory function that returns a function that updates the auth resource based on a CognitoCLIInputs request.\n * The function returns the request unchanged to enable .then() chaining\n *\n * The code is more-or-less refactored as-is from the existing update logic\n * @param context The amplify context\n * @param cfnFilename The template CFN filename\n * @param provider The cloud provider name\n */\nexport const getResourceUpdater = async (context: $TSAny, request: Readonly<CognitoConfiguration>) => {\n  const resources = context.amplify.getProjectMeta();\n\n  const adminQueriesFunctionName = get<{ category: string; resourceName: string }[]>(resources, ['api', 'AdminQueries', 'dependsOn'], [])\n    .filter(resource => resource.category === 'function')\n    .map(resource => resource.resourceName)\n    .find(resourceName => resourceName.includes('AdminQueries'));\n  if (adminQueriesFunctionName) {\n    await addAdminAuth(context, request.resourceName!, 'update', request.adminQueryGroup, adminQueriesFunctionName);\n  } else {\n    await addAdminAuth(context, request.resourceName!, 'add', request.adminQueryGroup);\n  }\n\n  const providerPlugin = context.amplify.getPluginInstance(context, 'awscloudformation');\n  const previouslySaved = JSON.parse(providerPlugin.loadResourceParameters(context, 'auth', request.resourceName)?.triggers || '{}');\n\n  await lambdaTriggers(request, context, previouslySaved);\n\n  await copyS3Assets(request);\n  return request;\n};\n\n/**\n * The 3 functions below should not be exported, but they are for now because externalAuthEnable still uses them individually\n */\nexport const copyCfnTemplate = async (context: any, category: string, options: any, cfnFilename: string) => {\n  const targetDir = path.join(pathManager.getBackendDirPath(), category, options.resourceName);\n  // enable feature flag to remove trigger dependency from auth template\n\n  const copyJobs = [\n    {\n      dir: cfnTemplateRoot,\n      template: cfnFilename,\n      target: path.join(targetDir, `${options.resourceName}-cloudformation-template.yml`),\n      paramsFile: path.join(targetDir, 'parameters.json'),\n    },\n  ];\n\n  const privateParams = Object.assign({}, options);\n  privateKeys.forEach(p => delete privateParams[p]);\n\n  return await context.amplify.copyBatch(context, copyJobs, privateParams, true);\n};\n\nexport const saveResourceParameters = (\n  context: any,\n  providerName: string,\n  category: string,\n  resource: string,\n  params: any,\n  envSpecificParams: any[] = [],\n) => {\n  const provider = context.amplify.getPluginInstance(context, providerName);\n  let privateParams = Object.assign({}, params);\n  privateKeys.forEach(p => delete privateParams[p]);\n  privateParams = removeDeprecatedProps(privateParams);\n  provider.saveResourceParameters(context, category, resource, privateParams, envSpecificParams);\n};\n\nexport const removeDeprecatedProps = (props: any) => {\n  [\n    'authRoleName',\n    'unauthRoleName',\n    'userpoolClientName',\n    'roleName',\n    'policyName',\n    'mfaLambdaLogPolicy',\n    'mfaPassRolePolicy',\n    'mfaLambdaIAMPolicy',\n    'userpoolClientLogPolicy',\n    'userpoolClientLambdaPolicy',\n    'lambdaLogPolicy',\n    'openIdRolePolicy',\n    'openIdLambdaIAMPolicy',\n    'mfaLambdaRole',\n    'openIdLambdaRoleName',\n    'CreateAuthChallenge',\n    'CustomMessage',\n    'DefineAuthChallenge',\n    'PostAuthentication',\n    'PostConfirmation',\n    'PreAuthentication',\n    'PreSignup',\n    'VerifyAuthChallengeResponse',\n  ].forEach(deprecatedField => delete props[deprecatedField]);\n  return props;\n};\n\nconst lambdaTriggers = async (coreAnswers: any, context: any, previouslySaved: any) => {\n  const { handleTriggers } = require('./trigger-flow-auth-helper');\n  let triggerKeyValues = {};\n  let authTriggerConnections: AuthTriggerConnection[];\n  if (coreAnswers.triggers) {\n    const triggerConfig: AuthTriggerConfig = await handleTriggers(context, coreAnswers, previouslySaved);\n    triggerKeyValues = triggerConfig.triggers;\n    authTriggerConnections = triggerConfig.authTriggerConnections;\n    coreAnswers.triggers = triggerKeyValues ? JSONUtilities.stringify(triggerKeyValues) : '{}';\n\n    if (FeatureFlags.getBoolean('auth.breakCircularDependency')) {\n      if (Array.isArray(authTriggerConnections) && authTriggerConnections.length > 0) {\n        coreAnswers.authTriggerConnections = JSONUtilities.stringify(authTriggerConnections);\n      } else {\n        delete coreAnswers.authTriggerConnections;\n      }\n    }\n    coreAnswers.breakCircularDependency = FeatureFlags.getBoolean('auth.breakCircularDependency');\n    if (triggerKeyValues) {\n      coreAnswers.parentStack = { Ref: 'AWS::StackId' };\n    }\n\n    // determine permissions needed for each trigger module\n    coreAnswers.permissions = await context.amplify.getTriggerPermissions(context, coreAnswers.triggers, 'auth', coreAnswers.resourceName);\n  } else if (previouslySaved) {\n    const targetDir = pathManager.getBackendDirPath();\n    Object.keys(previouslySaved).forEach(p => {\n      delete coreAnswers[p];\n    });\n    await context.amplify.deleteAllTriggers(previouslySaved, coreAnswers.resourceName, targetDir, context);\n  }\n  // remove unused coreAnswers.triggers key\n  if (coreAnswers.triggers && coreAnswers.triggers === '[]') {\n    delete coreAnswers.triggers;\n  }\n\n  // handle dependsOn data\n  const dependsOnKeys = Object.keys(triggerKeyValues).map(i => `${coreAnswers.resourceName}${i}`);\n  coreAnswers.dependsOn = context.amplify.dependsOnBlock(context, dependsOnKeys, 'Cognito');\n};\n\nexport const createUserPoolGroups = async (context: any, resourceName: string, userPoolGroupList?: string[]) => {\n  if (userPoolGroupList && userPoolGroupList.length > 0) {\n    const userPoolGroupPrecedenceList = [];\n\n    for (let i = 0; i < userPoolGroupList.length; i += 1) {\n      userPoolGroupPrecedenceList.push({\n        groupName: userPoolGroupList[i],\n        precedence: i + 1,\n      });\n    }\n\n    const userPoolGroupFile = path.join(pathManager.getBackendDirPath(), 'auth', 'userPoolGroups', 'user-pool-group-precedence.json');\n\n    const userPoolGroupParams = path.join(pathManager.getBackendDirPath(), 'auth', 'userPoolGroups', 'build', 'parameters.json');\n\n    /* eslint-disable */\n    const groupParams = {\n      AuthRoleArn: {\n        'Fn::GetAtt': ['AuthRole', 'Arn'],\n      },\n      UnauthRoleArn: {\n        'Fn::GetAtt': ['UnauthRole', 'Arn'],\n      },\n    };\n    /* eslint-enable */\n\n    JSONUtilities.writeJson(userPoolGroupParams, groupParams);\n    JSONUtilities.writeJson(userPoolGroupFile, userPoolGroupPrecedenceList);\n\n    context.amplify.updateamplifyMetaAfterResourceAdd('auth', 'userPoolGroups', {\n      service: 'Cognito-UserPool-Groups',\n      providerPlugin: 'awscloudformation',\n      dependsOn: [\n        {\n          category: 'auth',\n          resourceName,\n          attributes: ['UserPoolId', 'AppClientIDWeb', 'AppClientID', 'IdentityPoolId'],\n        },\n      ],\n    });\n    // create CFN\n    await generateUserPoolGroupStackTemplate(context, resourceName);\n  }\n};\n\nexport const updateUserPoolGroups = async (context: any, resourceName: string, userPoolGroupList?: string[]) => {\n  if (userPoolGroupList && userPoolGroupList.length > 0) {\n    const userPoolGroupPrecedenceList = [];\n\n    for (let i = 0; i < userPoolGroupList.length; i += 1) {\n      userPoolGroupPrecedenceList.push({\n        groupName: userPoolGroupList[i],\n        precedence: i + 1,\n      });\n    }\n\n    const userPoolGroupFile = path.join(\n      context.amplify.pathManager.getBackendDirPath(),\n      'auth',\n      'userPoolGroups',\n      'user-pool-group-precedence.json',\n    );\n\n    outputFileSync(userPoolGroupFile, JSON.stringify(userPoolGroupPrecedenceList, null, 4));\n\n    context.amplify.updateamplifyMetaAfterResourceUpdate('auth', 'userPoolGroups', {\n      service: 'Cognito-UserPool-Groups',\n      providerPlugin: 'awscloudformation',\n      dependsOn: [\n        {\n          category: 'auth',\n          resourceName,\n          attributes: ['UserPoolId', 'AppClientIDWeb', 'AppClientID', 'IdentityPoolId'],\n        },\n      ],\n    });\n    // generate template\n    await generateUserPoolGroupStackTemplate(context, resourceName);\n  }\n};\n\nconst addAdminAuth = async (\n  context: any,\n  authResourceName: string,\n  operation: 'update' | 'add',\n  adminGroup?: string,\n  functionName?: string,\n) => {\n  if (adminGroup) {\n    if (!functionName) {\n      const [shortId] = uuid().split('-');\n      functionName = `AdminQueries${shortId}`;\n    }\n    await createAdminAuthFunction(context, authResourceName, functionName, adminGroup, operation);\n    await createAdminAuthAPI(context, authResourceName, functionName, operation);\n  }\n};\n\nconst createAdminAuthFunction = async (\n  context: any,\n  authResourceName: string,\n  functionName: string,\n  adminGroup: string,\n  operation: 'update' | 'add',\n) => {\n  const targetDir = path.join(pathManager.getBackendDirPath(), 'function', functionName);\n  let lambdaGroupVar = adminGroup;\n\n  const dependsOn = [];\n\n  dependsOn.push({\n    category: 'auth',\n    resourceName: authResourceName,\n    attributes: ['UserPoolId'],\n  });\n\n  if (!lambdaGroupVar) {\n    lambdaGroupVar = 'NONE';\n  }\n\n  const functionProps = {\n    functionName: `${functionName}`,\n    roleName: `${functionName}LambdaRole`,\n    dependsOn,\n    authResourceName,\n    lambdaGroupVar,\n  };\n\n  const copyJobs = [\n    {\n      dir: adminAuthAssetRoot,\n      template: 'admin-auth-app.js',\n      target: path.join(targetDir, 'src/app.js'),\n    },\n    {\n      dir: adminAuthAssetRoot,\n      template: 'admin-auth-cognitoActions.js',\n      target: path.join(targetDir, 'src/cognitoActions.js'),\n    },\n    {\n      dir: adminAuthAssetRoot,\n      template: 'admin-auth-index.js',\n      target: path.join(targetDir, 'src/index.js'),\n    },\n    {\n      dir: adminAuthAssetRoot,\n      template: 'admin-auth-package.json',\n      target: path.join(targetDir, 'src/package.json'),\n    },\n    {\n      dir: adminAuthAssetRoot,\n      template: 'admin-queries-function-template.json.ejs',\n      target: path.join(targetDir, `${functionName}-cloudformation-template.json`),\n    },\n  ];\n\n  // copy over the files\n  await context.amplify.copyBatch(context, copyJobs, functionProps, true);\n\n  if (operation === 'add') {\n    // add amplify-meta and backend-config\n    const backendConfigs = {\n      service: FunctionServiceNameLambdaFunction,\n      providerPlugin: 'awscloudformation',\n      build: true,\n      dependsOn,\n    };\n\n    await context.amplify.updateamplifyMetaAfterResourceAdd('function', functionName, backendConfigs);\n    context.print.success(`Successfully added ${functionName} function locally`);\n  } else {\n    context.print.success(`Successfully updated ${functionName} function locally`);\n  }\n};\n\nconst createAdminAuthAPI = async (context: any, authResourceName: string, functionName: string, operation: 'update' | 'add') => {\n  const apiName = 'AdminQueries';\n  const targetDir = path.join(pathManager.getBackendDirPath(), 'api', apiName);\n  const dependsOn = [];\n\n  dependsOn.push(\n    {\n      category: 'auth',\n      resourceName: authResourceName,\n      attributes: ['UserPoolId'],\n    },\n    {\n      category: 'function',\n      resourceName: functionName,\n      attributes: ['Arn', 'Name'],\n    },\n  );\n\n  const apiProps = {\n    functionName,\n    authResourceName,\n    dependsOn,\n  };\n\n  const copyJobs = [\n    {\n      dir: adminAuthAssetRoot,\n      template: 'admin-queries-api-template.json.ejs',\n      target: path.join(targetDir, 'admin-queries-cloudformation-template.json'),\n    },\n    {\n      dir: adminAuthAssetRoot,\n      template: 'admin-queries-api-params.json',\n      target: path.join(targetDir, 'parameters.json'),\n    },\n  ];\n\n  // copy over the files\n  await context.amplify.copyBatch(context, copyJobs, apiProps, true);\n\n  if (operation === 'add') {\n    // Update amplify-meta and backend-config\n    const backendConfigs = {\n      service: 'API Gateway',\n      providerPlugin: 'awscloudformation',\n      authorizationType: 'AMAZON_COGNITO_USER_POOLS',\n      dependsOn,\n    };\n\n    await context.amplify.updateamplifyMetaAfterResourceAdd('api', apiName, backendConfigs);\n    context.print.success(`Successfully added ${apiName} API locally`);\n  } else {\n    context.print.success(`Successfully updated ${apiName} API locally`);\n  }\n};\n\nconst copyS3Assets = async (request: CognitoConfiguration) => {\n  const targetDir = path.join(pathManager.getBackendDirPath(), 'auth', request.resourceName!, 'assets');\n  const triggers = request.triggers ? JSONUtilities.parse<any>(request.triggers) : null;\n  const confirmationFileNeeded = request.triggers && triggers.CustomMessage && triggers.CustomMessage.includes('verification-link');\n  if (confirmationFileNeeded) {\n    if (!existsSync(targetDir)) {\n      const source = path.join(triggerRoot, 'CustomMessage/assets');\n      copySync(source, targetDir);\n    }\n  }\n};\n"]}