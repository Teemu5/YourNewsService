{"version":3,"file":"core-questions.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/question-factories/core-questions.js"],"names":[],"mappings":"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","sourcesContent":["const inquirer = require('inquirer');\nconst { uniq, flatten } = require('lodash');\nconst chalk = require('chalk');\n\nfunction parseInputs(input, amplify, defaultValuesFilename, stringMapsFilename, currentAnswers, context) {\n  // eslint-disable-line max-len\n  const defaultValuesSrc = `${__dirname}/../assets/${defaultValuesFilename}`;\n  const stringMapsSrc = `${__dirname}/../assets/${stringMapsFilename}`;\n  const { getAllDefaults } = require(defaultValuesSrc);\n  const { getAllMaps } = require(stringMapsSrc);\n\n  // Can have a cool question builder function here based on input json - will iterate on this\n  // Can also have some validations here based on the input json\n  // Uncool implementation here\n\n  const questionChalk = input.prefixColor ? chalk[input.prefixColor] : chalk.green;\n  const prefix = input.prefix ? `${'\\n'} ${questionChalk(input.prefix)} ${'\\n'}` : '';\n\n  let question = {\n    name: input.key,\n    message: input.question,\n    prefix,\n    suffix: input.suffix,\n    when: amplify.getWhen(input, currentAnswers, context.updatingAuth, amplify),\n    validate: amplify.inputValidation(input),\n    default: () => {\n      // eslint-disable-line no-unused-vars\n      // if the user is editing and there is a previous value, this is always the default\n      if (context.updatingAuth && context.updatingAuth[input.key] !== undefined) {\n        if (input.key === 'triggers') {\n          return triggerDefaults(context, input, getAllMaps(context.updatingAuth)[input.map]);\n        }\n        return context.updatingAuth[input.key];\n      }\n      // if not editing or no previous value, get defaults (either w/ or w/out social provider flow)\n      return getAllDefaults(amplify.getProjectDetails(amplify))[input.key];\n    },\n  };\n\n  if (input.type && ['list', 'multiselect'].includes(input.type)) {\n    if (context.updatingAuth && input.iterator) {\n      question = iteratorQuestion(input, question, context);\n      // if selecting existing value to edit it's not require to validate inputs\n      question.validate = () => true;\n    } else if (input.filter) {\n      question = filterInputs(input, question, getAllMaps, context, currentAnswers);\n    } else if (input.requiredOptions) {\n      question = getRequiredOptions(input, question, getAllMaps, context, currentAnswers);\n    } else if (!input.requiredOptions || (question.when && !question.when())) {\n      question = Object.assign(\n        {\n          choices: input.map ? getAllMaps(context.updatingAuth)[input.map] : input.options,\n        },\n        question,\n      );\n    }\n  }\n\n  if (input.type && input.type === 'list') {\n    question = Object.assign(\n      {\n        type: 'list',\n      },\n      question,\n    );\n  } else if (input.type && input.type === 'multiselect') {\n    question = Object.assign(\n      {\n        type: 'checkbox',\n      },\n      question,\n    );\n  } else if (input.type && input.type === 'confirm') {\n    question = Object.assign(\n      {\n        type: 'confirm',\n      },\n      question,\n    );\n  } else {\n    question = Object.assign(\n      {\n        type: 'input',\n      },\n      question,\n    );\n  }\n\n  return question;\n}\n\nfunction iteratorQuestion(input, question, context) {\n  if (context.updatingAuth[input.iterator]) {\n    question = Object.assign(\n      {\n        choices: context.updatingAuth[input.iterator].map(i => ({\n          name: i,\n          value: i,\n        })),\n      },\n      question,\n    );\n  } else if (input.iterator) {\n    // TODO: make iterator key useful for non-update actions\n    question = Object.assign(\n      {\n        choices: [],\n      },\n      question,\n    );\n  }\n  return question;\n}\n\nfunction getRequiredOptions(input, question, getAllMaps, context, currentAnswers) {\n  const sourceValues = Object.assign(context.updatingAuth ? context.updatingAuth : {}, currentAnswers);\n  const sourceArray = uniq(flatten(input.requiredOptions.map(i => sourceValues[i] || [])));\n  const requiredOptions = getAllMaps()[input.map] ? getAllMaps()[input.map].filter(x => sourceArray.includes(x.value)) : [];\n  const trueOptions = getAllMaps()[input.map] ? getAllMaps()[input.map].filter(x => !sourceArray.includes(x.value)) : [];\n  const msg =\n    requiredOptions && requiredOptions.length > 0\n      ? `--- ${input.requiredOptionsMsg} ${requiredOptions.map(t => t.name).join(', ')}   ---`\n      : '';\n  question = Object.assign(question, {\n    choices: [new inquirer.Separator(msg), ...trueOptions],\n    filter: userInput => {\n      return userInput.concat(...requiredOptions.map(z => z.value));\n    },\n  });\n  return question;\n}\n\nfunction filterInputs(input, question, getAllMaps, context, currentAnswers) {\n  if (input.filter === 'providers') {\n    const choices = input.map ? getAllMaps(context.updatingAuth)[input.map] : input.options;\n    const { requiredAttributes } = Object.assign(context.updatingAuth ? context.updatingAuth : {}, currentAnswers);\n    if (requiredAttributes) {\n      const attrMap = getAllMaps().attributeProviderMap;\n      requiredAttributes.forEach(attr => {\n        choices.forEach(choice => {\n          choice.missingAttributes = [];\n          if (!attrMap[attr] || !attrMap[attr][`${choice.value.toLowerCase()}`].attr) {\n            choice.missingAttributes = choice.missingAttributes.length < 1 ? [attr] : choice.missingAttributes.concat(attr);\n            const newList = choice.missingAttributes.join(', ');\n            choice.disabled = `Your userpool is configured to require ${newList.substring(\n              0,\n              newList.length,\n            )}, which cannot be retrieved from ${choice.name}`;\n          }\n        });\n      });\n    }\n    question = Object.assign({ choices }, question);\n  }\n  if (input.filter === 'attributes') {\n    let choices = input.map ? getAllMaps(context.updatingAuth)[input.map] : input.options;\n    choices = JSON.parse(JSON.stringify(choices));\n    const attrMap = getAllMaps().attributeProviderMap;\n    choices.forEach(choice => {\n      choice.missingProviders = [];\n      if (attrMap[choice.value]) {\n        Object.values(attrMap[choice.value]).forEach((provider, index) => {\n          if (!provider.attr) {\n            const providerKey = Object.keys(attrMap[choice.value])[index];\n            let providerName = providerKey.charAt(0).toUpperCase() + providerKey.slice(1);\n            if (providerName === 'Loginwithamazon') {\n              providerName = 'Login With Amazon';\n            }\n            choice.missingProviders = choice.missingProviders.length < 1 ? [providerName] : choice.missingProviders.concat(providerName);\n          }\n        });\n        if (choice.missingProviders && choice.missingProviders.length > 0) {\n          const newList = choice.missingProviders.join(', ');\n          choice.name = `${choice.name} (This attribute is not supported by ${newList.substring(0, newList.length)}.)`;\n        }\n      }\n    });\n    question = Object.assign({ choices }, question);\n  }\n  if (input.filter === 'updateOptions' && context.updatingAuth) {\n    const choices = input.map ? getAllMaps(context.updatingAuth)[input.map] : input.options;\n    const newChoices = JSON.parse(JSON.stringify(choices));\n    choices.forEach(c => {\n      if (c.conditionKey === 'useDefault' && context.updatingAuth[c.conditionKey] === c.value && !c.conditionMsg) {\n        const index = newChoices.findIndex(i => i.name === c.name);\n        newChoices.splice(index, 1);\n      } else if (c.conditionMsg && !context.updatingAuth[c.conditionKey]) {\n        if (context.updatingAuth.useDefault === 'defaultSocial') {\n          const index = newChoices.findIndex(i => i.name === c.name);\n          newChoices[index].disabled = `Disabled: ${c.conditionMsg}`;\n        } else {\n          const index = newChoices.findIndex(i => i.name === c.name);\n          newChoices.splice(index, 1);\n        }\n      }\n    });\n    question = Object.assign({ choices: newChoices }, question);\n  }\n  return question;\n}\n\nfunction triggerDefaults(context, input, availableOptions) {\n  const capabilityDefaults = [];\n  if (context.updatingAuth.triggers) {\n    const current =\n      typeof context.updatingAuth[input.key] === 'string' ? JSON.parse(context.updatingAuth[input.key]) : context.updatingAuth[input.key];\n    try {\n      if (current) {\n        availableOptions.forEach(a => {\n          let match = true;\n          Object.keys(a.triggers).forEach(t => {\n            if (current[t]) {\n              const test = a.triggers[t].every(c => current[t].includes(c));\n              if (!test) {\n                match = false;\n              }\n            } else {\n              match = false;\n            }\n          });\n          if (match) {\n            capabilityDefaults.push(a.value);\n          }\n        });\n      }\n    } catch (e) {\n      throw new Error('Error parsing capability defaults');\n    }\n  }\n  return capabilityDefaults;\n}\n\nmodule.exports = { parseInputs };\n"]}