{"version":3,"file":"user-pool-group-stack-transform.js","sourceRoot":"","sources":["../../../../src/provider-utils/awscloudformation/auth-stack-builder/user-pool-group-stack-transform.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  $TSContext,\n  AmplifyCategories,\n  AmplifySupportedService,\n  buildOverrideDir,\n  CFNTemplateFormat,\n  JSONUtilities,\n  pathManager,\n  writeCFNTemplate,\n  Template,\n  AmplifyStackTemplate,\n  AmplifyCategoryTransform,\n  $TSAny,\n} from 'amplify-cli-core';\nimport { AuthStackSythesizer } from './stack-synthesizer';\nimport * as cdk from '@aws-cdk/core';\nimport { AuthInputState } from '../auth-inputs-manager/auth-input-state';\nimport * as path from 'path';\nimport { AmplifyUserPoolGroupStack, AmplifyUserPoolGroupStackOutputs } from './auth-user-pool-group-stack-builder';\nimport { printer, formatter } from 'amplify-prompts';\nimport _ from 'lodash';\nimport { CognitoCLIInputs } from '../service-walkthrough-types/awsCognito-user-input-types';\nimport * as fs from 'fs-extra';\nimport * as vm from 'vm2';\nimport os from 'os';\n\nexport type UserPoolGroupMetadata = {\n  groupName: string;\n  precedence: number;\n  customPolicies?: any;\n};\n\nexport type AmplifyUserPoolGroupStackOptions = {\n  groups: UserPoolGroupMetadata[];\n  identityPoolName?: string;\n  cognitoResourceName: string;\n};\n\nexport class AmplifyUserPoolGroupTransform extends AmplifyCategoryTransform {\n  private _app: cdk.App;\n  private _userPoolGroupTemplateObj: AmplifyUserPoolGroupStack; // Props to modify Root stack data\n  private _synthesizer: AuthStackSythesizer;\n  private _synthesizerOutputs: AuthStackSythesizer;\n  private __userPoolGroupTemplateObjOutputs: AmplifyUserPoolGroupStackOutputs;\n  private _authResourceName: string;\n  private _category: string;\n  private _service: string;\n  private _cliInputs: CognitoCLIInputs;\n  private _resourceName: string;\n\n  constructor(resourceName: string) {\n    super(resourceName);\n    this._authResourceName = resourceName;\n    this._resourceName = 'userPoolGroups';\n    this._synthesizer = new AuthStackSythesizer();\n    this._synthesizerOutputs = new AuthStackSythesizer();\n    this._app = new cdk.App();\n    this._category = AmplifyCategories.AUTH;\n    this._service = AmplifySupportedService.COGNITOUSERPOOLGROUPS;\n  }\n\n  public async transform(context: $TSContext): Promise<Template> {\n    // parse Input data\n    const userPoolGroupStackOptions = await this.generateStackProps(context);\n\n    // generate cfn Constructs and AmplifyRootStackTemplate object to get overridden\n    await this.generateStackResources(userPoolGroupStackOptions);\n\n    // apply override on Amplify Object having CDK Constructs for Root Stack\n    await this.applyOverride();\n\n    // generate CFN template\n    const template: Template = await this.synthesizeTemplates();\n\n    // save stack\n    await this.saveBuildFiles(context, template);\n    return template;\n  }\n\n  /**\n   * Generates CFN REsources for Auth\n   * @returns CFN Template\n   */\n\n  private generateStackResources = async (props: AmplifyUserPoolGroupStackOptions) => {\n    this._userPoolGroupTemplateObj = new AmplifyUserPoolGroupStack(this._app, 'AmplifyUserPoolGroupStack', {\n      synthesizer: this._synthesizer,\n    });\n\n    this.__userPoolGroupTemplateObjOutputs = new AmplifyUserPoolGroupStackOutputs(this._app, 'AmplifyUserPoolGroupStackOutputs', {\n      synthesizer: this._synthesizerOutputs,\n    });\n\n    // add CFN parameters\n    this._userPoolGroupTemplateObj.addCfnParameter(\n      {\n        type: 'String',\n      },\n      'env',\n    );\n\n    this._userPoolGroupTemplateObj.addCfnParameter(\n      {\n        type: 'String',\n      },\n      'AuthRoleArn',\n    );\n\n    this._userPoolGroupTemplateObj.addCfnParameter(\n      {\n        type: 'String',\n      },\n      'UnauthRoleArn',\n    );\n\n    this._userPoolGroupTemplateObj.addCfnParameter(\n      {\n        type: 'String',\n        default: `auth${props.cognitoResourceName}UserPoolId`,\n      },\n      `auth${props.cognitoResourceName}UserPoolId`,\n    );\n\n    if (props.identityPoolName) {\n      this._userPoolGroupTemplateObj.addCfnParameter(\n        {\n          type: 'String',\n          default: `auth${props.cognitoResourceName}IdentityPoolId`,\n        },\n        `auth${props.cognitoResourceName}IdentityPoolId`,\n      );\n    }\n\n    this._userPoolGroupTemplateObj.addCfnParameter(\n      {\n        type: 'String',\n        default: `auth${props.cognitoResourceName}AppClientID`,\n      },\n      `auth${props.cognitoResourceName}AppClientID`,\n    );\n\n    this._userPoolGroupTemplateObj.addCfnParameter(\n      {\n        type: 'String',\n        default: `auth${props.cognitoResourceName}AppClientIDWeb`,\n      },\n      `auth${props.cognitoResourceName}AppClientIDWeb`,\n    );\n\n    // add CFN condition\n    this._userPoolGroupTemplateObj.addCfnCondition(\n      {\n        expression: cdk.Fn.conditionEquals(this._userPoolGroupTemplateObj.getCfnParameter('env'), 'NONE'),\n      },\n      'ShouldNotCreateEnvResources',\n    );\n\n    // generate resources\n    await this._userPoolGroupTemplateObj.generateUserPoolGroupResources(props);\n\n    // generate CFN outputs again to generate same Output Names as cdk doesnt allow resource with same logical names\n    if (props.identityPoolName) {\n      props.groups.forEach(group => {\n        this.__userPoolGroupTemplateObjOutputs.addCfnOutput(\n          {\n            value: cdk.Fn.getAtt(`${group.groupName}GroupRole`, 'Arn').toString(),\n          },\n          `${group.groupName}GroupRole`,\n        );\n      });\n    }\n  };\n\n  public applyOverride = async (): Promise<void> => {\n    const backendDir = pathManager.getBackendDirPath();\n    const overrideDir = path.join(backendDir, this._category, this._resourceName);\n    const isBuild = await buildOverrideDir(backendDir, overrideDir).catch(error => {\n      printer.debug(`Skipping build as ${error.message}`);\n      return false;\n    });\n    if (isBuild) {\n      const overrideCode: string = await fs.readFile(path.join(overrideDir, 'build', 'override.js'), 'utf-8').catch(() => {\n        formatter.list(['No override File Found', `To override ${this._resourceName} run amplify override auth`]);\n        return '';\n      });\n      const sandboxNode = new vm.NodeVM({\n        console: 'inherit',\n        timeout: 5000,\n        sandbox: {},\n      });\n      try {\n        sandboxNode.run(overrideCode).override(this._userPoolGroupTemplateObj as AmplifyUserPoolGroupStack & AmplifyStackTemplate);\n      } catch (err: $TSAny) {\n        const error = new Error(`Skipping override due to ${err}${os.EOL}`);\n        printer.error(`${error}`);\n        error.stack = undefined;\n        throw error;\n      }\n    }\n  };\n  /**\n   *\n   * @returns Object required to generate Stack using cdk\n   */\n  private generateStackProps = async (context: $TSContext): Promise<AmplifyUserPoolGroupStackOptions> => {\n    const resourceDirPath = path.join(pathManager.getBackendDirPath(), 'auth', 'userPoolGroups', 'user-pool-group-precedence.json');\n    const groups = JSONUtilities.readJson(resourceDirPath, { throwIfNotExist: true });\n    const cliState = new AuthInputState(this._authResourceName);\n    this._cliInputs = cliState.getCLIInputPayload();\n    const identityPoolName = this._cliInputs.cognitoConfig.identityPoolName;\n    return {\n      groups: groups as UserPoolGroupMetadata[],\n      identityPoolName,\n      cognitoResourceName: this._authResourceName,\n    };\n  };\n\n  /**\n   *\n   * @returns return CFN templates sunthesized by app\n   */\n  public synthesizeTemplates = async (): Promise<Template> => {\n    this._app.synth();\n    const templates = this._synthesizer.collectStacks();\n    const cfnUserPoolGroupStack: Template = templates.get('AmplifyUserPoolGroupStack')!;\n    const templatesOutput = this._synthesizerOutputs.collectStacks();\n    const cfnUserPoolGroupOutputs: Template = templatesOutput.get('AmplifyUserPoolGroupStackOutputs')!;\n    cfnUserPoolGroupStack.Outputs = cfnUserPoolGroupOutputs.Outputs;\n    return cfnUserPoolGroupStack;\n  };\n\n  public saveBuildFiles = async (context: $TSContext, template: Template): Promise<void> => {\n    const cognitoStackFileName = `${this._resourceName}-cloudformation-template.json`;\n    const cognitostackFilePath = path.join(\n      pathManager.getBackendDirPath(),\n      this._category,\n      this._resourceName,\n      'build',\n      cognitoStackFileName,\n    );\n    await writeCFNTemplate(template, cognitostackFilePath, {\n      templateFormat: CFNTemplateFormat.JSON,\n    });\n    // write parameters.json file\n    this.writeBuildFiles(context);\n  };\n\n  private writeBuildFiles = async (context: $TSContext) => {\n    const parametersJSONFilePath = path.join(\n      pathManager.getBackendDirPath(),\n      this._category,\n      this._resourceName,\n      'build',\n      'parameters.json',\n    );\n\n    const roles = {\n      AuthRoleArn: {\n        'Fn::GetAtt': ['AuthRole', 'Arn'],\n      },\n      UnauthRoleArn: {\n        'Fn::GetAtt': ['UnauthRole', 'Arn'],\n      },\n    };\n\n    //save parameters\n    let parameters = {\n      ...roles,\n    };\n    //save parameters\n    JSONUtilities.writeJson(parametersJSONFilePath, parameters);\n  };\n}\n"]}