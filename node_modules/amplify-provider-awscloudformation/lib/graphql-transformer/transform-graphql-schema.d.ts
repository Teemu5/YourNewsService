import { TransformerPluginProvider, AppSyncAuthConfiguration } from '@aws-amplify/graphql-transformer-interfaces';
import { TransformerProjectConfig } from '@aws-amplify/graphql-transformer-core';
import { Template } from '@aws-amplify/graphql-transformer-core/lib/config/project-config';
import { $TSContext } from 'amplify-cli-core';
import { SanityCheckRules } from './sanity-check';
export declare function transformGraphQLSchema(context: any, options: any): Promise<import("@aws-amplify/graphql-transformer-core").DeploymentResources>;
export declare function getDirectiveDefinitions(context: $TSContext, resourceDir: string): Promise<string>;
declare type TransformerFactoryArgs = {
    addSearchableTransformer: boolean;
    authConfig: any;
    storageConfig?: any;
    adminRoles?: Array<string>;
    identityPoolId?: string;
};
export declare type ProjectOptions<T> = {
    buildParameters: {
        S3DeploymentBucket: string;
        S3DeploymentRootKey: string;
    };
    projectDirectory: string;
    transformersFactory: (options: T) => Promise<TransformerPluginProvider[]>;
    transformersFactoryArgs: T;
    rootStackFileName: 'cloudformation-template.json';
    currentCloudBackendDirectory?: string;
    minify: boolean;
    lastDeployedProjectConfig?: TransformerProjectConfig;
    projectConfig: TransformerProjectConfig;
    dryRun?: boolean;
    authConfig?: AppSyncAuthConfiguration;
    stacks: Record<string, Template>;
    sandboxModeEnabled?: boolean;
    sanityCheckRules: SanityCheckRules;
};
export declare function buildAPIProject(opts: ProjectOptions<TransformerFactoryArgs>): Promise<import("@aws-amplify/graphql-transformer-core").DeploymentResources>;
export {};
//# sourceMappingURL=transform-graphql-schema.d.ts.map