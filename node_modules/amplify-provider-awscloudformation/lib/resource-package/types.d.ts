export declare type ResourceDefinition = {
    category: string;
    service: string;
    build?: boolean;
    resourceName: string;
    providerPlugin?: string;
};
export declare type BuiltResourceDefinition = ResourceDefinition & {
    lastBuildTimeStamp?: string | Date;
};
export declare type PackagerParams = {
    newPackageCreated: boolean;
    zipFilename: string;
    zipFilePath: string;
};
export declare type PackagedResourceDefinition = BuiltResourceDefinition & {
    packagerParams?: PackagerParams;
};
declare type UploaderParams = {
    s3Bucket: string;
    s3Key: string;
};
export declare type UploadedResourceDefinition = PackagedResourceDefinition & {
    uploaderParams?: UploaderParams;
};
export declare type TransformedCfnResource = PackagedResourceDefinition & {
    transformedCfnPaths: string[];
};
export declare type DeploymentResources = {
    resourcesToBeCreated: ResourceDefinition[];
    resourcesToBeSynced: ResourceDefinition[];
    resourcesToBeUpdated: ResourceDefinition[];
    resourcesToBeDeleted: ResourceDefinition[];
    tagsUpdated: boolean;
    allResources: ResourceDefinition[];
};
export declare enum ResourceDeployType {
    Export = 0,
    Push = 1
}
export declare type StackIncludeDetails = {
    parameters?: {
        [key: string]: any;
    };
    destination: string;
    nestedStacks?: StackParameters;
};
export declare type StackParameters = {
    [stackName: string]: StackIncludeDetails;
};
export declare type WrittenCfnResource = PackagedResourceDefinition & {
    destinationPath: string;
    nestedStacks?: StackParameters;
};
export {};
//# sourceMappingURL=types.d.ts.map