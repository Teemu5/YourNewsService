"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnknownDirectiveError = exports.InvalidDirectiveError = exports.InvalidGSIMigrationError = exports.InvalidMigrationError = exports.DestructiveMigrationError = exports.TransformerContractError = exports.SchemaValidationError = exports.InvalidTransformerError = void 0;
const os = __importStar(require("os"));
class InvalidTransformerError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, InvalidTransformerError.prototype);
        this.name = 'InvalidTransformerError';
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, InvalidTransformerError);
        }
    }
}
exports.InvalidTransformerError = InvalidTransformerError;
class SchemaValidationError extends Error {
    constructor(errors) {
        super(`Schema Errors:\n\n${errors.join('\n')}`);
        Object.setPrototypeOf(this, SchemaValidationError.prototype);
        this.name = 'SchemaValidationError';
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, SchemaValidationError);
        }
    }
}
exports.SchemaValidationError = SchemaValidationError;
class TransformerContractError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, TransformerContractError.prototype);
        this.name = 'TransformerContractError';
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, TransformerContractError);
        }
    }
}
exports.TransformerContractError = TransformerContractError;
class DestructiveMigrationError extends Error {
    constructor(message, removedModels, replacedModels) {
        super(message);
        this.removedModels = removedModels;
        this.replacedModels = replacedModels;
        this.toString = () => this.message;
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = 'DestructiveMigrationError';
        const prependSpace = (str) => ` ${str}`;
        const removedModelsList = this.removedModels.map(prependSpace).toString().trim();
        const replacedModelsList = this.replacedModels.map(prependSpace).toString().trim();
        if (removedModelsList && replacedModelsList) {
            this.message = `${this.message}${os.EOL}This update will remove table(s) [${removedModelsList}] and will replace table(s) [${replacedModelsList}]`;
        }
        else if (removedModelsList) {
            this.message = `${this.message}${os.EOL}This update will remove table(s) [${removedModelsList}]`;
        }
        else if (replacedModelsList) {
            this.message = `${this.message}${os.EOL}This update will replace table(s) [${replacedModelsList}]`;
        }
        this.message = `${this.message}${os.EOL}ALL EXISTING DATA IN THESE TABLES WILL BE LOST!${os.EOL}If this is intended, rerun the command with '--allow-destructive-graphql-schema-updates'.`;
    }
}
exports.DestructiveMigrationError = DestructiveMigrationError;
class InvalidMigrationError extends Error {
    constructor(message, cause, fix) {
        super(message);
        this.cause = cause;
        this.fix = fix;
        this.toString = () => `${this.message}\nCause: ${this.cause}\nHow to fix: ${this.fix}`;
        Object.setPrototypeOf(this, new.target.prototype);
        this.name = 'InvalidMigrationError';
    }
}
exports.InvalidMigrationError = InvalidMigrationError;
class InvalidGSIMigrationError extends InvalidMigrationError {
    constructor(message, cause, fix) {
        super(message, cause, fix);
        this.name = 'InvalidGSIMigrationError';
    }
}
exports.InvalidGSIMigrationError = InvalidGSIMigrationError;
class InvalidDirectiveError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, InvalidDirectiveError.prototype);
        this.name = 'InvalidDirectiveError';
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, InvalidDirectiveError);
        }
    }
}
exports.InvalidDirectiveError = InvalidDirectiveError;
class UnknownDirectiveError extends Error {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, UnknownDirectiveError.prototype);
        this.name = 'UnknownDirectiveError';
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, UnknownDirectiveError);
        }
    }
}
exports.UnknownDirectiveError = UnknownDirectiveError;
//# sourceMappingURL=errors.js.map